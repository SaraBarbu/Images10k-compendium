{"version":"1","records":[{"hierarchy":{"lvl1":"From raw data to results and summary tables"},"type":"lvl1","url":"/images10k-dataanalysis","position":0},{"hierarchy":{"lvl1":"From raw data to results and summary tables"},"content":"%pylab inline\nimport warnings\nwarnings.filterwarnings('ignore')\nimport scipy.io as io\nimport numpy as np\nimport pandas as pd\nimport statsmodels.api as sm\nfrom statsmodels.formula.api import ols\nimport json\nimport seaborn as sns\nsns.set(style=\"white\", context=\"talk\")\n\n","type":"content","url":"/images10k-dataanalysis","position":1},{"hierarchy":{"lvl1":"From raw data to results and summary tables"},"type":"lvl1","url":"/images10k-dataanalysis#from-raw-data-to-results-and-summary-tables","position":2},{"hierarchy":{"lvl1":"From raw data to results and summary tables"},"content":"\n\ndef entropy(labels, base=None):\n    n_labels = len(labels)\n    if n_labels <= 1:\n        return 0\n    value,counts = np.unique(labels, return_counts=True)\n    probs = counts / n_labels\n    n_classes = np.count_nonzero(probs)\n    if n_classes <= 1:\n        return 0\n    ent = 0.\n    base = e if base is None else base\n    for i in probs:\n        ent -= i * np.math.log(i, base)\n    return ent\n\nraw_data = pd.read_csv('Zooniverse_Data_2022_01_28.csv', engine='python') # all the data\nraw_data_dic = raw_data['annotations'].to_dict()         # info on the responses\nraw_ID = raw_data['subject_data'].to_dict()              # info on the images\nuser_id = raw_data['user_id'].to_dict()                  # info on the raters\n\ntable = pd.DataFrame(columns=['rater','image_ID','image_name','Resp1','Resp2','Cat1','Cat2','Cat3'])\n\nfor image in np.arange(len(raw_data_dic.keys())):\n\n    dic_on_image = json.loads(raw_ID.get(image))\n    image_ID = list(dic_on_image.keys())[0]  # image ID\n    dic_on_resp = json.loads(raw_data_dic.get(image))\n\n    rater = user_id[image]\n\n    try:\n        image_name = dic_on_image.get(image_ID)['Filename']\n    except:\n        image_name = dic_on_image.get(image_ID)['image_name_1']\n\n    image_resp1 = nan\n    image_resp2 = nan\n    image_cat1 = nan\n    image_cat2 = nan\n    image_cat3 = nan\n\n    for task in np.arange(len(dic_on_resp)):\n\n        if dic_on_resp[task].get('task') == 'T1':\n            image_resp1 = dic_on_resp[task].get('value')   # first name\n        if dic_on_resp[task].get('task') == 'T2':\n            image_resp2 = dic_on_resp[task].get('value')   # second name\n\n        if dic_on_resp[task].get('task') == 'T4':\n            image_cat1 = dic_on_resp[task].get('value')   # image_cat1\n\n        if dic_on_resp[task].get('task') == 'T3':\n            image_cat2 = dic_on_resp[task].get('value')   # image_cat2\n        if dic_on_resp[task].get('task') == 'T5':\n            image_cat2 = dic_on_resp[task].get('value')   # image_cat2\n\n        if dic_on_resp[task].get('task') == 'T6':\n            image_cat3 = dic_on_resp[task].get('value')   # image_cat3\n        if dic_on_resp[task].get('task') == 'T7':\n            image_cat3 = dic_on_resp[task].get('value')   # image_cat3\n        if dic_on_resp[task].get('task') == 'T8':\n            image_cat3 = dic_on_resp[task].get('value')   # image_cat3\n        if dic_on_resp[task].get('task') == 'T9':\n            image_cat3 = dic_on_resp[task].get('value')   # image_cat3\n\n    table.loc[image] = [rater,image_ID,image_name,image_resp1,image_resp2,image_cat1,image_cat2,image_cat3]\n\ntable2 = pd.DataFrame(columns=['image_ID','image_name','howmany','Resp1','Resp2',\n                               'Cat1','Cat2','Cat3',\n                               'Cat1_agr','Cat2_agr','Cat3_agr',\n                               'Comp_dem','Most_comm','Entropy'])\n\nfor image in np.arange(len(table['image_ID'].unique())):\n\n    checking = table['image_ID'].unique()[image]\n    howmany = len(table[table['image_ID']==checking])\n    image_name = table[table['image_ID']==checking]['image_name'].unique()[0]\n\n    Resp1 = table[table['image_ID']==checking]['Resp1'].str.lower().str.rstrip().value_counts(ascending=False)\n    Resp2 = table[table['image_ID']==checking]['Resp2'].str.lower().str.rstrip().value_counts(ascending=False)\n\n    for t,tt in enumerate(table[table['image_ID']==checking]['Cat1'][table[table['image_ID']==checking]['Cat1']=='animate and/or living'].index):\n        table.loc[tt,'Cat1'] = 'animate / living'\n    Cat1 = table[table['image_ID']==checking]['Cat1'].value_counts(ascending=False)\n\n    for t,tt in enumerate(table[table['image_ID']==checking]['Cat1'][table[table['image_ID']==checking]['Cat1']=='inanimate and/or  nonliving'].index):\n        table.loc[tt,'Cat1'] = 'inanimate / nonliving'\n    Cat1 = table[table['image_ID']==checking]['Cat1'].value_counts(ascending=False)\n\n    Cat2 = table[table['image_ID']==checking]['Cat2'].value_counts(ascending=False)\n    Cat3 = table[table['image_ID']==checking]['Cat3'].value_counts(ascending=False)\n\n    # % agreement on Cat1\n    if Cat1[0]==howmany:\n        agreement1 = 100\n    else:\n        agreement1 = (Cat1[0]/howmany)*100\n\n    # % agreement on Cat2\n    if Cat2[0]==howmany:\n        agreement2 = 100\n    else:\n        agreement2 = (Cat2[0]/howmany)*100\n\n    # % agreement on Cat3\n    if len(Cat3) ==0:\n        agreement3 = nan\n    elif Cat3[0]==howmany:\n        agreement3 = 100\n    else:\n        agreement3 = (Cat3[0]/howmany)*100\n\n    # ratio between the percentage of subjects providing\n    # the most common response and the second most common one\n    if len(Resp1)>2:\n        comp_dem = ((Resp1[0]/howmany)*100)/((Resp1[1]/howmany)*100)\n    else:\n        comp_dem = 0\n\n    # percentage of subjects providing the most common response\n    most_comm = (Resp1[0]/howmany)*100\n\n    # Entropy/H-index:\n    #ent = entropy(np.array(table[table['image_ID']==checking]['Resp1'].str.lower().str.rstrip()))\n    s = pd.Series(np.array(table[table['image_ID']==checking]['Resp1'].str.lower().str.rstrip()))\n    ent = entropy(s.dropna().values)\n\n    table2.loc[image] = [checking,image_name,howmany,dict(Resp1),dict(Resp2),\n                         dict(Cat1),dict(Cat2),dict(Cat3),\n                         agreement1,agreement2,agreement3,\n                        comp_dem,most_comm,ent]\n\n","type":"content","url":"/images10k-dataanalysis#from-raw-data-to-results-and-summary-tables","position":3},{"hierarchy":{"lvl1":"Basic Plots"},"type":"lvl1","url":"/images10k-dataanalysis#basic-plots","position":4},{"hierarchy":{"lvl1":"Basic Plots"},"content":"\n\nsummary_data = pd.read_csv('Zooniverse_Results_Summary_2022_01_29.csv') # all the data\n\nf, (ax1,ax2,ax3) = plt.subplots(1, 3, figsize=(20, 6), sharey=True)\n\na = ax1.hist(summary_data['Cat1_agr'])\nb = ax2.hist(summary_data['Cat2_agr'])\nc = ax3.hist(summary_data['Cat3_agr'])\n\nax1.set_xlabel(\"% agreement living vs. nonliving\")\nax2.set_xlabel(\"% agreement natural vs. artificial\")\nax3.set_xlabel(\"% agreement category\")\n\nax1.set_ylabel(\"How many images\")\n\nsns.despine(left=False, right=True, bottom=False, top=True)\n\nplt.show()\n\nf, (ax4,ax5,ax6) = plt.subplots(1, 3, figsize=(20, 6), sharey=True)\n\nd = ax4.hist(summary_data['Comp_dem'])\ne = ax5.hist(summary_data['Most_comm'])\nf = ax6.hist(summary_data['Entropy'])\n\nax4.set_xlabel(\"ratio of two most common responses\")\nax5.set_xlabel(\"% most common response\")\nax6.set_xlabel(\"entropy of responses\")\n\nax4.set_ylabel(\"How many images\")\n\nsns.despine(left=False, right=True, bottom=False, top=True)\n\nplt.show()\n\n","type":"content","url":"/images10k-dataanalysis#basic-plots","position":5},{"hierarchy":{"lvl1":"Check dropped ones and hard ones"},"type":"lvl1","url":"/images10k-dataanalysis#check-dropped-ones-and-hard-ones","position":6},{"hierarchy":{"lvl1":"Check dropped ones and hard ones"},"content":"\n\ndropped = summary_data[summary_data.howmany_saw-summary_data.howmany_name>1]\ndropped.describe()\n\nf, (ax4,ax5) = plt.subplots(1, 2, figsize=(18, 6), sharey=False, sharex=False)\n\nd = ax4.scatter(summary_data['howmany_name'],summary_data['howmany_saw'])\ne = ax5.hist(summary_data['howmany_saw']-summary_data['howmany_name'])\n\nax4.set_xlabel(\"# has been named\")\nax4.set_ylabel(\"# has been seen\")\n\nax5.set_xlabel(\"difference (saw-name)\")\nax5.set_ylabel(\"how many images\")\n\nsns.despine(left=False, right=True, bottom=False, top=True)\n\nplt.show()\n\nfew_answers = summary_data[summary_data['howmany_name']<10]\nmany_answers = summary_data[summary_data['howmany_name']>20]\n\nfew_answers[few_answers['Most_comm']<20]\n\nsummary_data[summary_data['image_ID']==72053753]\n\nmany_answers[many_answers['Most_comm']<13]\n\nmany_answers[many_answers['Most_comm']<30]\n\n","type":"content","url":"/images10k-dataanalysis#check-dropped-ones-and-hard-ones","position":7},{"hierarchy":{"lvl1":"Else"},"type":"lvl1","url":"/images10k-dataanalysis#else","position":8},{"hierarchy":{"lvl1":"Else"},"content":"\n\nsummary_data['dropped'] = summary_data.howmany_saw-summary_data.howmany_name\n\nsummary_data\n\nsummary_data.iloc[4465].Resp1","type":"content","url":"/images10k-dataanalysis#else","position":9},{"hierarchy":{"lvl1":"🧱 Objects"},"type":"lvl1","url":"/objects","position":0},{"hierarchy":{"lvl1":"🧱 Objects"},"content":"","type":"content","url":"/objects","position":1},{"hierarchy":{"lvl1":"🧱 Objects","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"type":"lvl2","url":"/objects#explore-carousels-of-non-living-items-below-each-section-features-interactive-image-selectors-built-using-dash","position":2},{"hierarchy":{"lvl1":"🧱 Objects","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"content":"\n\n","type":"content","url":"/objects#explore-carousels-of-non-living-items-below-each-section-features-interactive-image-selectors-built-using-dash","position":3},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Clothing Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"type":"lvl3","url":"/objects#clothing-carousel","position":4},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Clothing Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"content":"\n\nfrom dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\n\napp.title = \"👥 Clothing Carousel\"\n\n# 📦 Liste des sous-catégories de vêtements\nCLOTHING_PATH = os.path.abspath(\"../assets/object/clothing\")\nCLOTHING_ITEMS = sorted([\n    item for item in os.listdir(CLOTHING_PATH)\n    if os.path.isdir(os.path.join(CLOTHING_PATH, item))\n])\n\n# 📦 Dictionnaire {item: [liste d’images]}\nclothing_images = {\n    item: sorted([\n        os.path.join(CLOTHING_PATH, item, img)\n        for img in os.listdir(os.path.join(CLOTHING_PATH, item))\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for item in CLOTHING_ITEMS\n}\n\n# 🎨 Layout\napp.layout = html.Div([\n    html.H2(\"\\ud83d\\udc65 Clothing Carousel\", style={\n        \"textAlign\": \"center\", \"marginBottom\": \"10px\", \"marginTop\": \"5px\",\n        \"fontSize\": \"22px\", \"fontWeight\": \"bold\", \"fontFamily\": \"Georgia, serif\"\n    }),\n\n    html.Div([\n        html.Label(\"Select clothing item:\", style={\n            \"fontSize\": \"16px\", \"marginBottom\": \"6px\", \"fontFamily\": \"Georgia, serif\"\n        }),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\"label\": item.replace(\"_\", \" \").capitalize(), \"value\": item} for item in CLOTHING_ITEMS],\n            value=CLOTHING_ITEMS[0],\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\", \"fontFamily\": \"Georgia, serif\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n], style={\"fontFamily\": \"Georgia, serif\", \"padding\": \"20px\"})\n\n# 🔄 Affichage du carousel\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = clothing_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n    relative_path = os.path.relpath(images[0], os.path.abspath(\"../assets\"))\n\n    return html.Div([\n        html.Div([\n            html.Button(\"\\u2b05\\ufe0f\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"15px\"}),\n            html.Img(id=\"carousel-image\", src=f\"/assets/{relative_path}\",\n                     style={\"height\": \"415px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"\\u27a1\\ufe0f\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"15px\"}),\n        ], style={\"display\": \"flex\", \"justifyContent\": \"center\", \"alignItems\": \"center\",\"maxWidth\": \"100%\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontFamily\": \"Georgia, serif\", \"color\": \"#444\"})\n    ])\n\n# 🔄 Navigation flèches\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    relative_path = os.path.relpath(images[index], os.path.abspath(\"../assets\"))\n    return f\"/assets/{relative_path}\", index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Lancer l'app \nif __name__ == \"__main__\":\n    clear_output(wait=True)\n    app.run(port=8170)\n\n","type":"content","url":"/objects#clothing-carousel","position":5},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Decoration Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"type":"lvl3","url":"/objects#decoration-carousel","position":6},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Decoration Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"content":"\n\nfrom dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ✅ Tell Dash to look for assets one level up\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\n\napp.title = \"🎀 Decoration Carousel\"\n\n# 📦 Sous-catégories dans assets/object/decoration/\nDECORATION_PATH = os.path.abspath(\"../assets/object/decoration\")\nDECORATION_ITEMS = sorted([\n    item for item in os.listdir(DECORATION_PATH)\n    if os.path.isdir(os.path.join(DECORATION_PATH, item))\n])\n\n# 📦 Dictionnaire {item: [liste d’images]}\ndecoration_images = {\n    item: sorted([\n        os.path.join(DECORATION_PATH, item, img)\n        for img in os.listdir(os.path.join(DECORATION_PATH, item))\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for item in DECORATION_ITEMS\n}\n\n# 🎨 Layout principal\napp.layout = html.Div([\n    html.H2(\"\\ud83c\\udf80 Decoration Carousel\", style={\n        \"textAlign\": \"center\", \"marginBottom\": \"25px\", \"marginTop\": \"10px\", \"overflowY\": \"hidden\",\n        \"fontSize\": \"22px\", \"fontWeight\": \"bold\", \"fontFamily\": \"Georgia, serif\"\n    }),\n\n    html.Div([\n        html.Label(\"Select decoration item:\", style={\n            \"fontSize\": \"16px\", \"marginBottom\": \"6px\", \"fontFamily\": \"Georgia, serif\"\n        }),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\n                \"label\": item.replace(\"_\", \" \").capitalize(),\n                \"value\": item\n            } for item in DECORATION_ITEMS],\n            value=DECORATION_ITEMS[0],\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\", \"fontFamily\": \"Georgia, serif\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n], style={\"fontFamily\": \"Georgia, serif\", \"padding\": \"20px\"})\n\n# 🔄 Afficher le bon carousel\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = decoration_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n    relative_path = os.path.relpath(images[0], os.path.abspath(\"../assets\"))\n\n    return html.Div([\n        html.Div([\n            html.Button(\"\\u2b05\\ufe0f\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"16px\", \"padding\": \"5px 10px\", \"marginRight\": \"15px\"}),\n            html.Img(id=\"carousel-image\", src=f\"/assets/{relative_path}\",\n                     style={\"height\": \"409px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"\\u27a1\\ufe0f\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"16px\", \"padding\": \"5px 10px\", \"marginLeft\": \"15px\"}),\n        ], style={\"display\": \"flex\", \"justifyContent\": \"center\", \"alignItems\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontFamily\": \"Georgia, serif\", \"color\": \"#444\"})\n    ])\n\n# 🔄 Navigation flèches\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    relative_path = os.path.relpath(images[index], os.path.abspath(\"../assets\"))\n    return f\"/assets/{relative_path}\", index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Lancer \nif __name__ == \"__main__\":\n    clear_output(wait=True)\n    app.run(port=8204)\n\n","type":"content","url":"/objects#decoration-carousel","position":7},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Food Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"type":"lvl3","url":"/objects#food-carousel","position":8},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Food Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"content":"\n\nfrom dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ✅ Dash setup with proper assets path\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"🍽️ Food & Produce Carousel\"\n\n# 📦 Corrected category paths\nCATEGORY_MAP = {\n    \"Prepared food\": \"../assets/object/food\",\n    \"Fruit\": \"../assets/object/fruit\",\n    \"Vegetable\": \"../assets/object/vegetable\"\n}\n\n# 📦 List items per category\ncategory_items = {\n    label: sorted([\n        item for item in os.listdir(path)\n        if os.path.isdir(os.path.join(path, item))\n    ])\n    for label, path in CATEGORY_MAP.items()\n}\n\n# 📦 {(category, item): [list of image paths]}\nimage_lookup = {}\nfor category, path in CATEGORY_MAP.items():\n    for item in category_items[category]:\n        full_path = os.path.join(path, item)\n        image_lookup[(category, item)] = sorted([\n            f\"{full_path}/{img}\"\n            for img in os.listdir(full_path)\n            if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n        ])\n\n# 🖼️ Layout\napp.layout = html.Div([\n    html.H2(\"🍽️ Food & Produce Carousel\", style={\n        \"textAlign\": \"center\", \"marginBottom\": \"10px\", \"marginTop\": \"5px\",\n        \"fontSize\": \"22px\", \"fontWeight\": \"bold\", \"fontFamily\": \"Georgia, serif\"\n    }),\n\n    html.Div([\n        html.Label(\"Select category:\", style={\"fontWeight\": \"bold\", \"marginBottom\": \"6px\"}),\n        dcc.Dropdown(\n            id='category-dropdown',\n            options=[{\"label\": cat, \"value\": cat} for cat in CATEGORY_MAP],\n            value=\"Prepared food\",\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"16px\"}),\n\n    html.Div(id='item-dropdown-container', style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Update item dropdown based on category\n@app.callback(\n    Output('item-dropdown-container', 'children'),\n    Input('category-dropdown', 'value')\n)\ndef update_item_dropdown(category):\n    items = category_items.get(category, [])\n    return html.Div([\n        html.Label(\"Select item:\", style={\"fontWeight\": \"bold\", \"marginBottom\": \"6px\"}),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\"label\": item.replace(\"_\", \" \").capitalize(), \"value\": item} for item in items],\n            value=items[0] if items else None,\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ])\n\n# 🔁 Carousel content\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('category-dropdown', 'value'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(category, item):\n    images = image_lookup.get((category, item), [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"20px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"415px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"20px\"}),\n        ], style={\"textAlign\": \"center\", \"marginBottom\": \"12px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"13px\", \"fontStyle\": \"italic\", \"fontFamily\": \"Georgia, serif\"})\n    ])\n\n# 🔁 Navigation buttons\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Launch \nif __name__ == \"__main__\":\n    clear_output(wait=True)\n    app.run(port=8802)\n\n","type":"content","url":"/objects#food-carousel","position":9},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Furniture Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"type":"lvl3","url":"/objects#furniture-carousel","position":10},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Furniture Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"content":"\n\nfrom dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ✅ Debug: Print current working directory and paths\nprint(\"Current working directory:\", os.getcwd())\nprint(\"Checking furniture directory paths...\")\n\n# Try multiple possible paths\npossible_paths = [\n    os.path.abspath(\"../assets/object/furniture\"),\n    os.path.abspath(\"assets/object/furniture\"),\n    os.path.abspath(\"./assets/object/furniture\"),\n    os.path.join(os.getcwd(), \"assets/object/furniture\"),\n    os.path.join(os.getcwd(), \"../assets/object/furniture\")\n]\n\nFURNITURE_DIR = None\nfor path in possible_paths:\n    print(f\"Trying path: {path}\")\n    if os.path.exists(path):\n        FURNITURE_DIR = path\n        print(f\"✅ Found furniture directory at: {path}\")\n        break\n    else:\n        print(f\"❌ Path does not exist: {path}\")\n\nif not FURNITURE_DIR:\n    print(\"❌ Could not find furniture directory!\")\n    FURNITURE_ITEMS = []\n    furniture_images = {}\nelse:\n    # 📦 List furniture categories\n    FURNITURE_ITEMS = sorted([\n        item for item in os.listdir(FURNITURE_DIR)\n        if os.path.isdir(os.path.join(FURNITURE_DIR, item))\n    ])\n    print(f\"Found furniture items: {FURNITURE_ITEMS}\")\n\n# Try multiple asset folder configurations\nasset_folders = [\n    os.path.abspath(\"../assets\"),\n    os.path.abspath(\"assets\"),\n    os.path.abspath(\"./assets\"),\n    os.path.join(os.getcwd(), \"assets\"),\n    os.path.join(os.getcwd(), \"../assets\")\n]\n\nASSETS_FOLDER = None\nfor folder in asset_folders:\n    if os.path.exists(folder):\n        ASSETS_FOLDER = folder\n        print(f\"✅ Using assets folder: {folder}\")\n        break\n\n# ✅ Create Dash app with multiple fallback configurations\napp = JupyterDash(\n    __name__,\n    assets_folder=ASSETS_FOLDER if ASSETS_FOLDER else None,\n    suppress_callback_exceptions=True\n)\napp.title = \"🪑 Furniture Carousel\"\n\n# 📸 Build image dictionary with multiple path formats\nfurniture_images = {}\nif FURNITURE_DIR and FURNITURE_ITEMS:\n    for item in FURNITURE_ITEMS:\n        item_path = os.path.join(FURNITURE_DIR, item)\n        if os.path.exists(item_path):\n            images = []\n            for img in os.listdir(item_path):\n                if img.lower().endswith((\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\", \".webp\")):\n                    # Store the full absolute path for now\n                    full_path = os.path.join(item_path, img)\n                    images.append(full_path)\n            furniture_images[item] = sorted(images)\n            print(f\"{item}: {len(images)} images found\")\n\n# 🎨 Layout\napp.layout = html.Div([\n    html.H2(\"🪑 Furniture Carousel\", style={\n        \"textAlign\": \"center\", \"marginBottom\": \"10px\", \"marginTop\": \"5px\",\n        \"fontSize\": \"22px\", \"fontWeight\": \"bold\", \"fontFamily\": \"Georgia, serif\"\n    }),\n    \n    html.Div([\n        html.Label(\"Select furniture item:\", style={\n            \"fontWeight\": \"normal\", \"display\": \"block\", \"marginBottom\": \"6px\",\n            \"fontSize\": \"15px\", \"fontFamily\": \"Georgia, serif\"\n        }),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\"label\": item.replace(\"_\", \" \").capitalize(), \"value\": item} for item in FURNITURE_ITEMS],\n            value=FURNITURE_ITEMS[0] if FURNITURE_ITEMS else None,\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n    \n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"}),\n    \n\n])\n\n# 🔁 Display carousel\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    if not item:\n        return html.P(\"Please select a furniture item.\", style={\"textAlign\": \"center\"})\n    \n    images = furniture_images.get(item, [])\n    \n    if not images:\n        return html.P(f\"No images available for {item}.\", style={\"textAlign\": \"center\"})\n    \n    # Convert absolute path to relative path for web serving\n    image_urls = []\n    for img_path in images:\n        # Try multiple URL formats\n        relative_path = os.path.relpath(img_path, os.getcwd())\n        web_path = relative_path.replace(\"\\\\\", \"/\")  # Convert Windows paths\n        \n        # Remove leading ../ if present and try different formats\n        url_attempts = [\n            f\"/{web_path}\",\n            web_path,\n            f\"/assets/{web_path.split('assets/')[-1]}\" if 'assets/' in web_path else None,\n            f\"assets/{web_path.split('assets/')[-1]}\" if 'assets/' in web_path else None\n        ]\n        \n        # Use the first non-None attempt\n        img_url = next((url for url in url_attempts if url), web_path)\n        image_urls.append(img_url)\n    \n    filename = os.path.basename(images[0])\n    \n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"20px\"}),\n            html.Img(id=\"carousel-image\", \n                     src=image_urls[0],\n                     style={\"height\": \"415px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"20px\"}),\n        ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n        \n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=image_urls),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontStyle\": \"italic\", \"fontFamily\": \"Georgia, serif\"})\n    ])\n\n# 🔁 Navigation arrows\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n    \n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n    \n    # Get the original filename from the path\n    original_paths = list(furniture_images.values())\n    if original_paths:\n        filename = os.path.basename(original_paths[0][index] if len(original_paths[0]) > index else \"unknown\")\n    else:\n        filename = \"unknown\"\n    \n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Launch\nclear_output(wait=True)\napp.run(port=8125)\n\n","type":"content","url":"/objects#furniture-carousel","position":11},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Game Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"type":"lvl3","url":"/objects#game-carousel","position":12},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Game Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"content":"\n\nfrom dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ✅ Dash config with parent asset path\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"🎮 Game Carousel\"\n\n# 📦 Absolute path to assets/object/game\nGAME_PATH = os.path.abspath(\"../assets/object/game\")\n\n# 📦 Load available game items\nGAME_ITEMS = []\nif os.path.exists(GAME_PATH):\n    GAME_ITEMS = sorted([\n        item for item in os.listdir(GAME_PATH)\n        if os.path.isdir(os.path.join(GAME_PATH, item))\n    ])\n\n# 📦 Map game items to image paths\ngame_images = {\n    item: sorted([\n        f\"/assets/object/game/{item}/{img}\"\n        for img in os.listdir(os.path.join(GAME_PATH, item))\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for item in GAME_ITEMS\n}\n\n# 🖼️ Layout\napp.layout = html.Div([\n    html.H2(\"🎮 Game Carousel\", style={\n        \"textAlign\": \"center\", \"marginBottom\": \"25px\", \"marginTop\": \"10px\",\n        \"fontSize\": \"22px\", \"fontWeight\": \"bold\", \"fontFamily\": \"Georgia, serif\"\n    }),\n\n    html.Div([\n        html.Label(\"Select game item:\", style={\n            \"fontWeight\": \"normal\", \"display\": \"block\", \"marginBottom\": \"6px\",\n            \"fontSize\": \"15px\", \"fontFamily\": \"Georgia, serif\"\n        }),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\"label\": item.replace(\"_\", \" \").capitalize(), \"value\": item} for item in GAME_ITEMS],\n            value=GAME_ITEMS[0] if GAME_ITEMS else None,\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Carousel display\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = game_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"20px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"430px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"20px\"}),\n        ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontStyle\": \"italic\", \"fontFamily\": \"Georgia, serif\"})\n    ])\n\n# 🔁 Navigation\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Launch app\nif __name__ == \"__main__\":\n    clear_output(wait=True)\n    app.run(port=8160)\n\n","type":"content","url":"/objects#game-carousel","position":13},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Household Appliance Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"type":"lvl3","url":"/objects#household-appliance-carousel","position":14},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Household Appliance Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"content":"\n\nfrom dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ✅ Configure Dash to use assets folder one level up\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"🧺 Household Appliance Carousel\"\n\n# 📦 Absolute path to the images\nAPPLIANCE_PATH = os.path.abspath(\"../assets/object/household_appliance\")\n\n# 📦 Load appliance categories\nAPPLIANCE_ITEMS = []\nif os.path.exists(APPLIANCE_PATH):\n    APPLIANCE_ITEMS = sorted([\n        item for item in os.listdir(APPLIANCE_PATH)\n        if os.path.isdir(os.path.join(APPLIANCE_PATH, item))\n    ])\n\n# 📦 Build image list\nappliance_images = {\n    item: sorted([\n        f\"/assets/object/household_appliance/{item}/{img}\"\n        for img in os.listdir(os.path.join(APPLIANCE_PATH, item))\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for item in APPLIANCE_ITEMS\n}\n\n# 🖼️ Layout\napp.layout = html.Div([\n    html.H2(\"🧺 Household Appliance Carousel\", style={\n        \"textAlign\": \"center\", \"marginBottom\": \"10px\", \"marginTop\": \"5px\",\n        \"fontSize\": \"22px\", \"fontWeight\": \"bold\", \"fontFamily\": \"Georgia, serif\"\n    }),\n\n    html.Div([\n        html.Label(\"Select appliance:\", style={\n            \"fontWeight\": \"normal\", \"display\": \"block\", \"marginBottom\": \"6px\",\n            \"fontSize\": \"15px\", \"fontFamily\": \"Georgia, serif\"\n        }),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\"label\": item.replace(\"_\", \" \").capitalize(), \"value\": item} for item in APPLIANCE_ITEMS],\n            value=APPLIANCE_ITEMS[0] if APPLIANCE_ITEMS else None,\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Carousel content\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = appliance_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"20px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"420px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"20px\"}),\n        ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontStyle\": \"italic\", \"fontFamily\": \"Georgia, serif\"})\n    ])\n\n# 🔁 Navigation logic\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Launch app\nif __name__ == \"__main__\":\n    clear_output(wait=True)\n    app.run(port=8163)\n\n","type":"content","url":"/objects#household-appliance-carousel","position":15},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Electronic Device Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"type":"lvl3","url":"/objects#electronic-device-carousel","position":16},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Electronic Device Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"content":"\n\nfrom dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ✅ Configuration Dash (assets one level up)\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\n\napp.title = \"⚡ Electronic Device Carousel\"\n\n# 📦 Sous-catégories\nELECTRONIC_ITEMS = sorted([\n    item for item in os.listdir(\"../assets/object/electronic_device\")\n    if os.path.isdir(f\"../assets/object/electronic_device/{item}\")\n])\n\n# 📦 Dictionnaire {item: [images]}\nelectronic_images = {\n    item: sorted([\n        os.path.abspath(f\"../assets/object/electronic_device/{item}/{img}\")\n        for img in os.listdir(f\"../assets/object/electronic_device/{item}\")\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for item in ELECTRONIC_ITEMS\n}\n\n# 🎨 Layout\napp.layout = html.Div([\n    html.H2(\"⚡ Electronic Device Carousel\", style={\n        \"textAlign\": \"center\", \"marginBottom\": \"10px\", \"marginTop\": \"5px\",\n        \"fontSize\": \"22px\", \"fontWeight\": \"bold\", \"fontFamily\": \"Georgia, serif\"\n    }),\n\n    html.Div([\n    html.Label(\"Select electronic device:\", style={\n        \"marginBottom\": \"6px\", \"fontSize\": \"15px\", \"fontStyle\": \"normal\"\n    }),\n    dcc.Dropdown(\n        id='item-dropdown',\n        options=[{\"label\": item.replace(\"_\", \" \").capitalize(), \"value\": item} for item in ELECTRONIC_ITEMS],\n        value=ELECTRONIC_ITEMS[0],\n        clearable=False,\n        style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n    )\n], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Affiche carousel\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = electronic_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n    relative_path = os.path.relpath(images[0], os.path.abspath(\"../assets\"))\n    dash_path = f\"/assets/{relative_path}\"\n\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"20px\"}),\n\n            html.Img(id=\"carousel-image\", src=dash_path,\n                     style={\"height\": \"420px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"20px\"}),\n        ], style={\"textAlign\": \"center\", \"marginBottom\": \"15px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"13px\", \"fontFamily\": \"Georgia, serif\"})\n    ])\n\n# 🔁 Navigation\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    relative_path = os.path.relpath(images[index], os.path.abspath(\"../assets\"))\n    return f\"/assets/{relative_path}\", index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Lancer\nif __name__ == \"__main__\":\n    clear_output(wait=True)\n    app.run(port=8806)\n\n","type":"content","url":"/objects#electronic-device-carousel","position":17},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Kitchenware Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"type":"lvl3","url":"/objects#kitchenware-carousel","position":18},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Kitchenware Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"content":"\n\nfrom dash import dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\n\n# ✅ Dash config with correct asset path\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"🍽️ Kitchenware Carousel\"\n\n# 📂 Load kitchenware categories\nKITCHENWARE_DIR = os.path.abspath(\"../assets/object/kitchenware\")\nKITCHENWARE_ITEMS = sorted([\n    item for item in os.listdir(KITCHENWARE_DIR)\n    if os.path.isdir(os.path.join(KITCHENWARE_DIR, item))\n])\n\n# 📸 Load images into a dictionary {item: [image paths]}\nkitchenware_images = {\n    item: sorted([\n        f\"/assets/object/kitchenware/{item}/{img}\"\n        for img in os.listdir(os.path.join(KITCHENWARE_DIR, item))\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for item in KITCHENWARE_ITEMS\n}\n\n# 🖼️ Layout\napp.layout = html.Div([\n    html.H2(\"🍽️ Kitchenware Carousel\", style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div([\n        html.Label(\"Select kitchenware item:\", style={\n            \"fontWeight\": \"normal\", \"display\": \"block\", \"marginBottom\": \"8px\"\n        }),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\"label\": item.replace(\"_\", \" \").capitalize(), \"value\": item} for item in KITCHENWARE_ITEMS],\n            value=KITCHENWARE_ITEMS[0],\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Update carousel on selection\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = kitchenware_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"20px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"420px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"20px\"}),\n        ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontStyle\": \"italic\"})\n    ])\n\n# 🔁 Arrows navigation\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Launch app\napp.run(port=8987)\n\n","type":"content","url":"/objects#kitchenware-carousel","position":19},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Jewlery Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"type":"lvl3","url":"/objects#jewlery-carousel","position":20},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Jewlery Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"content":"\n\nfrom dash import dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\n\n# ✅ Dash config with correct asset path\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"💍 Jewelry Carousel\"\n\n# 📦 Load jewelry item folders\nJEWELRY_DIR = os.path.abspath(\"../assets/object/jewelry\")\nJEWELRY_ITEMS = sorted([\n    item for item in os.listdir(JEWELRY_DIR)\n    if os.path.isdir(os.path.join(JEWELRY_DIR, item))\n])\n\n# 📦 Dictionary: {item: [list of image paths]}\njewelry_images = {\n    item: sorted([\n        f\"/assets/object/jewelry/{item}/{img}\"\n        for img in os.listdir(os.path.join(JEWELRY_DIR, item))\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for item in JEWELRY_ITEMS\n}\n\n# 🖼️ Layout\napp.layout = html.Div([\n    html.H2(\"💍 Jewelry Carousel\", style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div([\n        html.Label(\"Select jewelry item:\", style={\n            \"fontWeight\": \"bold\", \"display\": \"block\", \"marginBottom\": \"8px\"\n        }),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\"label\": item.replace(\"_\", \" \").capitalize(), \"value\": item} for item in JEWELRY_ITEMS],\n            value=JEWELRY_ITEMS[0],\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Update carousel on dropdown change\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = jewelry_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"20px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"430px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"20px\"}),\n        ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontStyle\": \"italic\"})\n    ])\n\n# 🔁 Handle left/right navigation\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Run app\napp.run(port=8234)\n\n","type":"content","url":"/objects#jewlery-carousel","position":21},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Musical Instrument Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"type":"lvl3","url":"/objects#musical-instrument-carousel","position":22},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Musical Instrument Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"content":"\n\nfrom dash import dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\n\n# ✅ Dash config with parent asset path\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"🎶 Musical Instrument Carousel\"\n\n# 📂 Load musical instrument categories\nMUSIC_DIR = os.path.abspath(\"../assets/object/musical_instrument\")\nMUSICAL_ITEMS = sorted([\n    item for item in os.listdir(MUSIC_DIR)\n    if os.path.isdir(os.path.join(MUSIC_DIR, item))\n])\n\n# 📸 Dictionary {item: list of images}\nmusical_images = {\n    item: sorted([\n        f\"/assets/object/musical_instrument/{item}/{img}\"\n        for img in os.listdir(os.path.join(MUSIC_DIR, item))\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for item in MUSICAL_ITEMS\n}\n\n# 🖼️ Layout\napp.layout = html.Div([\n    html.H2(\"🎶 Musical Instrument Carousel\", style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div([\n        html.Label(\"Select musical instrument:\", style={\n            \"fontWeight\": \"normal\", \"display\": \"block\", \"marginBottom\": \"8px\"\n        }),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\"label\": item.replace(\"_\", \" \").capitalize(), \"value\": item} for item in MUSICAL_ITEMS],\n            value=MUSICAL_ITEMS[0],\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Affichage du carousel\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = musical_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"20px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"430px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"20px\"}),\n        ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontStyle\": \"italic\"})\n    ])\n\n# 🔁 Navigation flèches\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Run app\napp.run(port=8221)\n\n","type":"content","url":"/objects#musical-instrument-carousel","position":23},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Medical Instrument Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"type":"lvl3","url":"/objects#medical-instrument-carousel","position":24},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Medical Instrument Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"content":"\n\nfrom dash import dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\n\n# ✅ Dash config with correct asset path\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"🩺 Medical Instrument Carousel\"\n\n# 📂 Load medical instrument categories\nMEDICAL_DIR = os.path.abspath(\"../assets/object/medical_instrument\")\nMEDICAL_ITEMS = sorted([\n    item for item in os.listdir(MEDICAL_DIR)\n    if os.path.isdir(os.path.join(MEDICAL_DIR, item))\n])\n\n# 📸 Dictionary {item: list of images}\nmedical_images = {\n    item: sorted([\n        f\"/assets/object/medical_instrument/{item}/{img}\"\n        for img in os.listdir(os.path.join(MEDICAL_DIR, item))\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for item in MEDICAL_ITEMS\n}\n\n# 🖼️ Layout\napp.layout = html.Div([\n    html.H2(\"🩺 Medical Instrument Carousel\", style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div([\n        html.Label(\"Select medical instrument:\", style={\n            \"fontWeight\": \"normal\", \"display\": \"block\", \"marginBottom\": \"8px\"\n        }),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\"label\": item.replace(\"_\", \" \").capitalize(), \"value\": item} for item in MEDICAL_ITEMS],\n            value=MEDICAL_ITEMS[0],\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Update carousel on selection\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = medical_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"20px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"430px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"20px\"}),\n        ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontStyle\": \"italic\"})\n    ])\n\n# 🔁 Navigation with arrows\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Launch app\napp.run(port=8159)\n\n","type":"content","url":"/objects#medical-instrument-carousel","position":25},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Tool Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"type":"lvl3","url":"/objects#tool-carousel","position":26},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Tool Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"content":"\n\nfrom dash import dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\n\n# ✅ Proper config for images in notebook\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"🔧 Tool Carousel\"\n\n# 📦 Tool categories list\nTOOL_DIR = os.path.abspath(\"../assets/object/tool\")\nTOOL_ITEMS = sorted([\n    item for item in os.listdir(TOOL_DIR)\n    if os.path.isdir(os.path.join(TOOL_DIR, item))\n])\n\n# 📸 Collect image paths per tool\ntool_images = {}\nfor item in TOOL_ITEMS:\n    item_dir = os.path.join(TOOL_DIR, item)\n    rel_dir = os.path.relpath(item_dir, os.path.abspath(\"../assets\"))\n    tool_images[item] = sorted([\n        f\"/assets/{rel_dir}/{img}\"\n        for img in os.listdir(item_dir)\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n\n# 🖼️ Layout\napp.layout = html.Div([\n    html.H2(\"🔧 Tool Carousel\", style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div([\n        html.Label(\"Select tool item:\", style={\n            \"fontWeight\": \"normal\", \"display\": \"block\", \"marginBottom\": \"8px\"\n        }),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\n                \"label\": item.replace(\"_\", \" \").capitalize(),\n                \"value\": item\n            } for item in TOOL_ITEMS],\n            value=TOOL_ITEMS[0],\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Carousel display\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = tool_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"20px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"430px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"20px\"})\n        ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontStyle\": \"italic\"})\n    ])\n\n# 🔁 Arrow navigation\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Launch server\napp.run(port=8124)\n\n","type":"content","url":"/objects#tool-carousel","position":27},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"School Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"type":"lvl3","url":"/objects#school-carousel","position":28},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"School Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"content":"\n\nfrom dash import dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\n\n# ✅ Setup Dash app with proper asset path\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"📚 School Carousel\"\n\n# 📦 Get all school-related categories\nSCHOOL_DIR = os.path.abspath(\"../assets/object/school\")\nSCHOOL_ITEMS = sorted([\n    item for item in os.listdir(SCHOOL_DIR)\n    if os.path.isdir(os.path.join(SCHOOL_DIR, item))\n])\n\n# 📸 Collect images per category\nschool_images = {}\nfor item in SCHOOL_ITEMS:\n    item_dir = os.path.join(SCHOOL_DIR, item)\n    rel_dir = os.path.relpath(item_dir, os.path.abspath(\"../assets\"))\n    school_images[item] = sorted([\n        f\"/assets/{rel_dir}/{img}\"\n        for img in os.listdir(item_dir)\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n\n# 🖼️ Layout\napp.layout = html.Div([\n    html.H2(\"📚 School Carousel\", style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div([\n        html.Label(\"Select school item:\", style={\n            \"fontWeight\": \"normal\", \"display\": \"block\", \"marginBottom\": \"8px\"\n        }),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\n                \"label\": item.replace(\"_\", \" \").capitalize(),\n                \"value\": item\n            } for item in SCHOOL_ITEMS],\n            value=SCHOOL_ITEMS[0],\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Update carousel when dropdown changes\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = school_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"20px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"430px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"20px\"})\n        ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontStyle\": \"italic\"})\n    ])\n\n# 🔁 Navigate through images\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Run it\napp.run(port=8299)\n\n","type":"content","url":"/objects#school-carousel","position":29},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Outdoor Sport Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"type":"lvl3","url":"/objects#outdoor-sport-carousel","position":30},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Outdoor Sport Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"content":"\n\nfrom dash import dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\n\n# ✅ Dash config with asset path setup\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"🏃 Outdoor Sport Carousel\"\n\n# 📂 Load outdoor sport categories\nSPORT_DIR = os.path.abspath(\"../assets/object/outdoor_sport\")\nSPORT_ITEMS = sorted([\n    item for item in os.listdir(SPORT_DIR)\n    if os.path.isdir(os.path.join(SPORT_DIR, item))\n])\n\n# 📸 Dictionary {item: list of image paths}\nsport_images = {\n    item: sorted([\n        f\"/assets/object/outdoor_sport/{item}/{img}\"\n        for img in os.listdir(os.path.join(SPORT_DIR, item))\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for item in SPORT_ITEMS\n}\n\n# 🖼️ Layout\napp.layout = html.Div([\n    html.H2(\"🏃 Outdoor Sport Carousel\", style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div([\n        html.Label(\"Select outdoor sport item:\", style={\n            \"fontWeight\": \"normal\", \"display\": \"block\", \"marginBottom\": \"8px\"\n        }),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\"label\": item.replace(\"_\", \" \").capitalize(), \"value\": item} for item in SPORT_ITEMS],\n            value=SPORT_ITEMS[0],\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Display carousel based on dropdown\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = sport_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"20px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"420px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"20px\"}),\n        ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontStyle\": \"italic\"})\n    ])\n\n# 🔁 Navigation arrows\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Run app\napp.run(port=8876)\n\n","type":"content","url":"/objects#outdoor-sport-carousel","position":31},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Vehicle Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"type":"lvl3","url":"/objects#vehicle-carousel","position":32},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Vehicle Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"content":"\n\nfrom dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ✅ Absolute assets path support\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\n\napp.title = \"🚗 Vehicle Carousel\"\n\n# 📦 List all subfolders in assets/object/vehicle/\nVEHICLE_PATH = os.path.abspath(\"../assets/object/vehicle\")\nVEHICLE_ITEMS = sorted([\n    item for item in os.listdir(VEHICLE_PATH)\n    if os.path.isdir(os.path.join(VEHICLE_PATH, item))\n])\n\n# 📦 Dictionary {item: [image list]}\nvehicle_images = {\n    item: sorted([\n        os.path.join(VEHICLE_PATH, item, img)\n        for img in os.listdir(os.path.join(VEHICLE_PATH, item))\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for item in VEHICLE_ITEMS\n}\n\n# 🎨 Layout\napp.layout = html.Div([\n    html.H2(\"🚗 Vehicle Carousel\", style={\n        \"textAlign\": \"center\", \"marginBottom\": \"25px\", \"marginTop\": \"10px\",\n        \"fontSize\": \"24px\", \"fontWeight\": \"bold\", \"fontFamily\": \"Georgia, serif\"\n    }),\n\n    html.Div([\n        html.Label(\"Select vehicle item:\", style={\"fontSize\": \"16px\", \"marginBottom\": \"6px\", \"fontFamily\": \"Georgia, serif\"}),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[\n                {\"label\": item.replace(\"_\", \" \").capitalize(), \"value\": item}\n                for item in VEHICLE_ITEMS\n            ],\n            value=VEHICLE_ITEMS[0] if VEHICLE_ITEMS else None,\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\", \"fontFamily\": \"Georgia, serif\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n], style={\"fontFamily\": \"Georgia, serif\", \"padding\": \"30px\"})\n\n# 🔁 Update carousel\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value'),\n    prevent_initial_call=False\n)\ndef update_carousel(item):\n    images = vehicle_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\", \"fontSize\": \"18px\", \"color\": \"#e74c3c\"})\n\n    relative_path = os.path.relpath(images[0], os.path.abspath(\"../assets\"))\n    filename = os.path.basename(images[0])\n\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0, style={\n                \"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"15px\",\n                \"backgroundColor\": \"#f8f9fa\", \"border\": \"1px solid #ccc\",\n                \"borderRadius\": \"8px\", \"cursor\": \"pointer\"\n            }),\n\n            html.Img(id=\"carousel-image\", src=f\"/assets/{relative_path}\", style={\n                \"maxHeight\": \"380px\", \"maxWidth\": \"380px\",\n                \"borderRadius\": \"12px\", \"boxShadow\": \"0 0 6px rgba(0,0,0,0.1)\"\n            }),\n\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0, style={\n                \"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"15px\",\n                \"backgroundColor\": \"#f8f9fa\", \"border\": \"1px solid #ccc\",\n                \"borderRadius\": \"8px\", \"cursor\": \"pointer\"\n            }),\n        ], style={\"display\": \"flex\", \"justifyContent\": \"center\", \"alignItems\": \"center\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display', style={\n            \"fontSize\": \"14px\", \"marginTop\": \"10px\", \"color\": \"#444\", \"fontFamily\": \"Georgia, serif\"\n        })\n    ])\n\n# 🔁 Image navigation\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    relative_path = os.path.relpath(images[index], os.path.abspath(\"../assets\"))\n    filename = os.path.basename(images[index])\n    return f\"/assets/{relative_path}\", index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Run\nif __name__ == \"__main__\":\n    clear_output(wait=True)\n    app.run(port=8997)\n\n","type":"content","url":"/objects#vehicle-carousel","position":33},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Bathroom Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"type":"lvl3","url":"/objects#bathroom-carousel","position":34},{"hierarchy":{"lvl1":"🧱 Objects","lvl3":"Bathroom Carousel","lvl2":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash."},"content":"\n\nfrom dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ✅ Tell Dash to look for assets one level up\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\n\napp.title = \"🚿 Bathroom Carousel\"\n\n# 📦 Sous-catégories dans assets/object/bathroom/\nBATHROOM_ITEMS = sorted([\n    item for item in os.listdir(\"../assets/object/bathroom\")\n    if os.path.isdir(os.path.join(\"../assets/object/bathroom\", item))\n])\n\n# 📦 Dictionnaire {item: [liste d’images absolues]}\nbathroom_images = {\n    item: sorted([\n        os.path.abspath(os.path.join(\"..\", \"assets\", \"object\", \"bathroom\", item, img))\n        for img in os.listdir(os.path.join(\"../assets/object/bathroom\", item))\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for item in BATHROOM_ITEMS\n}\n\n# 🖼️ Layout principal\napp.layout = html.Div([\n    html.H2(\"🚿 Bathroom Carousel\", style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div([\n        html.Label(\"Select bathroom item:\"),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\n                \"label\": html.Div(item.replace(\"_\", \" \").capitalize()),\n                \"value\": item\n            } for item in BATHROOM_ITEMS],\n            value=BATHROOM_ITEMS[0] if BATHROOM_ITEMS else None,\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Afficher le carousel\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = bathroom_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    # ✅ Get filename + relative path for Dash\n    filename = os.path.basename(images[0])\n    relative_path = os.path.relpath(images[0], os.path.abspath(\"../assets\"))\n    dash_path = f\"/assets/{relative_path}\"\n\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"15px\"}),\n\n            html.Img(id=\"carousel-image\", src=dash_path,\n                     style={\"height\": \"430px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"15px\"}),\n        ], style={\"display\": \"flex\", \"justifyContent\": \"center\", \"alignItems\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\"})\n    ])\n\n# 🔁 Navigation flèches\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    relative_path = os.path.relpath(images[index], os.path.abspath(\"../assets\"))  # ✅ Convert abs → web path\n    return f\"/assets/{relative_path}\", index, f\"{index + 1}/{len(images)} - {filename}\"\n\n\nimport threading\nimport time\n\ndef keep_dash_running():\n    try:\n        app.run(port=8804, debug=False, use_reloader=False)\n    except:\n        print(\"Dash server already running or port in use\")\n\n# 🚀 Lancer\nif __name__ == \"__main__\":\n    clear_output(wait=True)\n    app.run(port=8604)","type":"content","url":"/objects#bathroom-carousel","position":35},{"hierarchy":{"lvl1":"🧬 Animated Beings"},"type":"lvl1","url":"/animated-being","position":0},{"hierarchy":{"lvl1":"🧬 Animated Beings"},"content":"","type":"content","url":"/animated-being","position":1},{"hierarchy":{"lvl1":"🧬 Animated Beings","lvl2":"Explore carousels for various living categories below. Each section features interactive image selectors built using Dash."},"type":"lvl2","url":"/animated-being#explore-carousels-for-various-living-categories-below-each-section-features-interactive-image-selectors-built-using-dash","position":2},{"hierarchy":{"lvl1":"🧬 Animated Beings","lvl2":"Explore carousels for various living categories below. Each section features interactive image selectors built using Dash."},"content":"\n\n","type":"content","url":"/animated-being#explore-carousels-for-various-living-categories-below-each-section-features-interactive-image-selectors-built-using-dash","position":3},{"hierarchy":{"lvl1":"🧬 Animated Beings","lvl3":"Human Carousel","lvl2":"Explore carousels for various living categories below. Each section features interactive image selectors built using Dash."},"type":"lvl3","url":"/animated-being#human-carousel","position":4},{"hierarchy":{"lvl1":"🧬 Animated Beings","lvl3":"Human Carousel","lvl2":"Explore carousels for various living categories below. Each section features interactive image selectors built using Dash."},"content":"\n\nfrom dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ✅ Dash config with parent asset path\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"🧍 Human Face Carousel\"\n\n# 📦 Paths\nHUMAN_PATH = os.path.abspath(\"../assets/human\")\nHUMAN_PARTS = sorted([d for d in os.listdir(HUMAN_PATH) if os.path.isdir(f\"{HUMAN_PATH}/{d}\")])\n\n# 📦 Face-specific subfolders\nFACE_SEX = [\"female\", \"male\"]\nFACE_AGES = [\"baby\", \"child\", \"adolescent\", \"adult\", \"elder\"]\n\n# 📦 Load non-face images\nbasic_images = {\n    part: sorted([\n        f\"/assets/human/{part}/{img}\"\n        for img in os.listdir(os.path.join(HUMAN_PATH, part))\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for part in HUMAN_PARTS if part != \"face\"\n}\n\n# 📦 Load face images\nface_images = {}\nfor sex in FACE_SEX:\n    for age in FACE_AGES:\n        folder = os.path.join(HUMAN_PATH, \"face\", sex, age)\n        if os.path.isdir(folder):\n            face_images[(sex, age)] = sorted([\n                f\"/assets/human/face/{sex}/{age}/{img}\"\n                for img in os.listdir(folder)\n                if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n            ])\n\n# 🖼️ Layout\napp.layout = html.Div([\n    html.H2(\"🧍 Human Carousel\", style={\n        \"textAlign\": \"center\", \"marginBottom\": \"25px\", \"marginTop\": \"10px\",\n        \"fontSize\": \"24px\", \"fontWeight\": \"bold\", \"fontFamily\": \"Georgia, serif\"\n    }),\n\n    html.Div([\n        html.Label(\"Select body part:\", style={\n            \"fontWeight\": \"normal\", \"display\": \"block\", \"marginBottom\": \"6px\",\n            \"fontSize\": \"15px\", \"fontFamily\": \"Georgia, serif\"\n        }),\n        dcc.Dropdown(\n            id='part-dropdown',\n            options=[{\"label\": part.capitalize(), \"value\": part} for part in HUMAN_PARTS],\n            value=HUMAN_PARTS[0] if HUMAN_PARTS else None,\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='sub-dropdowns', style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Update sex/age dropdowns if 'face'\n@app.callback(\n    Output('sub-dropdowns', 'children'),\n    Input('part-dropdown', 'value')\n)\ndef update_sub_dropdowns(part):\n    if part == \"face\":\n        return html.Div([\n            html.Label(\"Sex:\", style={\"marginBottom\": \"6px\", \"display\": \"block\"}),\n            dcc.Dropdown(\n                id='sex-dropdown',\n                options=[{\"label\": s.capitalize(), \"value\": s} for s in FACE_SEX],\n                value=FACE_SEX[0],\n                clearable=False,\n                style={\"width\": \"200px\", \"margin\": \"0 auto 12px auto\"}\n            ),\n            html.Label(\"Age group:\", style={\"marginBottom\": \"6px\", \"display\": \"block\"}),\n            dcc.Dropdown(\n                id='age-dropdown',\n                options=[{\"label\": a.capitalize(), \"value\": a} for a in FACE_AGES],\n                value=FACE_AGES[0],\n                clearable=False,\n                style={\"width\": \"200px\", \"margin\": \"0 auto\"}\n            )\n        ])\n    else:\n        return html.Div([\n            dcc.Dropdown(id='sex-dropdown', value='female', style={'display': 'none'}),\n            dcc.Dropdown(id='age-dropdown', value='baby', style={'display': 'none'})\n        ])\n\n# 🔁 Update carousel based on dropdowns\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('part-dropdown', 'value'),\n    Input('sex-dropdown', 'value'),\n    Input('age-dropdown', 'value'),\n    prevent_initial_call=False\n)\ndef update_carousel(part, sex, age):\n    if part == \"face\":\n        images = face_images.get((sex, age), [])\n    else:\n        images = basic_images.get(part, [])\n\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"15px\"}\n),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"450px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"15px\"}\n),\n        ], style={\"display\": \"flex\", \"justifyContent\": \"center\", \"alignItems\": \"center\", \"marginBottom\": \"20px\"}),\n\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontStyle\": \"italic\", \"fontFamily\": \"Georgia, serif\"})\n    ])\n\n# 🔁 Navigation logic\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Run the app\nif __name__ == \"__main__\":\n    clear_output(wait=True)\n    app.run(port=8167)\n\n","type":"content","url":"/animated-being#human-carousel","position":5},{"hierarchy":{"lvl1":"🧬 Animated Beings","lvl3":"Bird Carousel","lvl2":"Explore carousels for various living categories below. Each section features interactive image selectors built using Dash."},"type":"lvl3","url":"/animated-being#bird-carousel","position":6},{"hierarchy":{"lvl1":"🧬 Animated Beings","lvl3":"Bird Carousel","lvl2":"Explore carousels for various living categories below. Each section features interactive image selectors built using Dash."},"content":"\n\nfrom dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ✅ Tell Dash to look for assets one level up\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\n\napp.title = \"🕊️ Bird Carousel\"\n\n# 📦 Liste des espèces d'oiseaux\nBIRD_SPECIES = sorted([\n    d for d in os.listdir(\"../assets/birds\")\n    if os.path.isdir(os.path.join(\"../assets/birds\", d))\n])\n\n# 📦 Dictionnaire {species: [images]}\nbird_images = {}\nfor species in BIRD_SPECIES:\n    folder = os.path.join(\"../assets/birds\", species)\n    images = []\n    for root, _, files in os.walk(folder):\n        images += [os.path.join(root, f) for f in files if f.lower().endswith((\".jpg\", \".jpeg\", \".png\"))]\n    bird_images[species] = sorted(images)\n\n# 🎨 Layout principal\napp.layout = html.Div([\n    html.H2(\"\\ud83d\\udd4a\\ufe0f Bird Carousel\", style={\n        \"textAlign\": \"center\", \"marginBottom\": \"10px\", \"marginTop\": \"5px\",\n        \"fontSize\": \"18px\", \"fontWeight\": \"bold\", \"fontFamily\": \"Georgia, serif\"\n    }),\n\n    html.Div([\n        html.Label(\"Select bird species:\", style={\"fontSize\": \"16px\", \"marginBottom\": \"6px\", \"fontFamily\": \"Georgia, serif\"}),\n        dcc.Dropdown(\n            id='species-dropdown',\n            options=[{\"label\": s.capitalize(), \"value\": s} for s in BIRD_SPECIES],\n            value=BIRD_SPECIES[0],\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\", \"fontFamily\": \"Georgia, serif\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n], style={\"fontFamily\": \"Georgia, serif\", \"padding\": \"30px\"})\n\n\n# 🔄 Affiche le bon carousel pour chaque espèce\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('species-dropdown', 'value')\n)\ndef update_carousel(species):\n    images = bird_images.get(species, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n\n    return html.Div([\n        html.Div([\n            html.Button(\"\\u2b05\\ufe0f\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"15px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"416px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"\\u27a1\\ufe0f\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"15px\"}),\n        ], style={\"display\": \"flex\", \"justifyContent\": \"center\", \"alignItems\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"13px\", \"fontFamily\": \"Georgia, serif\", \"color\": \"#444\"})\n    ])\n\n# 🔄 Navigation entre les images\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Lancer \nif __name__ == \"__main__\":\n    clear_output(wait=True)\n    app.run(port=8139)\n\n","type":"content","url":"/animated-being#bird-carousel","position":7},{"hierarchy":{"lvl1":"🧬 Animated Beings","lvl3":"Fish Carousel","lvl2":"Explore carousels for various living categories below. Each section features interactive image selectors built using Dash."},"type":"lvl3","url":"/animated-being#fish-carousel","position":8},{"hierarchy":{"lvl1":"🧬 Animated Beings","lvl3":"Fish Carousel","lvl2":"Explore carousels for various living categories below. Each section features interactive image selectors built using Dash."},"content":"\n\nfrom dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ✅ Dash config with parent asset path\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"🐟 Fish Carousel\"\n\n# 📦 Liste des espèces\nFISH_SPECIES = sorted([\n    d for d in os.listdir(\"../assets/fish\")\n    if os.path.isdir(f\"../assets/fish/{d}\")\n])\n\n# 📦 Dictionnaire {species: [image paths]}\nfish_images = {}\nfor species in FISH_SPECIES:\n    folder = f\"../assets/fish/{species}\"\n    images = []\n    for root, _, files in os.walk(folder):\n        images += [\n            os.path.abspath(os.path.join(root, f))\n            for f in files if f.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n        ]\n    fish_images[species] = sorted(images)\n\n# 🖼️ Layout\napp.layout = html.Div([\n    html.H2(\"🐟 Fish Carousel\", style={\n        \"textAlign\": \"center\", \"marginBottom\": \"25px\", \"marginTop\": \"10px\",\n        \"fontSize\": \"24px\", \"fontWeight\": \"bold\", \"fontFamily\": \"Georgia, serif\"\n    }),\n\n    html.Div([\n        html.Label(\"Select fish species:\", style={\n            \"marginBottom\": \"6px\", \"frontSize\": \"15px\", \"frontStyle\": \"normal\"\n            \n        }),\n        dcc.Dropdown(\n            id='species-dropdown',\n            options=[{\"label\": s.capitalize(), \"value\": s} for s in FISH_SPECIES],\n            value=FISH_SPECIES[0],\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Affiche carousel\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('species-dropdown', 'value')\n)\ndef update_carousel(species):\n    images = fish_images.get(species, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n    relative_path = os.path.relpath(images[0], os.path.abspath(\"../assets\"))\n    dash_path = f\"/assets/{relative_path}\"\n\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"15px\"}),\n            html.Img(id=\"carousel-image\", src=dash_path,\n                     style={\"height\": \"450px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"15px\"}),\n        ], style={\"display\": \"flex\", \"justifyContent\": \"center\", \"alignItems\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"13px\", \"fontFamily\": \"Georgia, serif\"})\n    ])\n\n# 🔁 Navigation\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    relative_path = os.path.relpath(images[index], os.path.abspath(\"../assets\"))\n    return f\"/assets/{relative_path}\", index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Launch\nif __name__ == \"__main__\":\n    clear_output(wait=True)\n    app.run(port=8805)\n\n","type":"content","url":"/animated-being#fish-carousel","position":9},{"hierarchy":{"lvl1":"🧬 Animated Beings","lvl3":"Reptile Carousel","lvl2":"Explore carousels for various living categories below. Each section features interactive image selectors built using Dash."},"type":"lvl3","url":"/animated-being#reptile-carousel","position":10},{"hierarchy":{"lvl1":"🧬 Animated Beings","lvl3":"Reptile Carousel","lvl2":"Explore carousels for various living categories below. Each section features interactive image selectors built using Dash."},"content":"\n\nfrom dash import dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ✅ Configure app with proper asset path\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"🦎 Reptile Carousel\"\n\n# 📂 Load reptile species\nREPTILE_DIR = os.path.abspath(\"../assets/reptiles\")\nREPTILE_SPECIES = sorted([\n    d for d in os.listdir(REPTILE_DIR)\n    if os.path.isdir(os.path.join(REPTILE_DIR, d))\n])\n\n# 📸 Dictionary of {species: [image paths]}\nreptile_images = {}\nfor species in REPTILE_SPECIES:\n    folder = os.path.join(REPTILE_DIR, species)\n    images = []\n    for root, _, files in os.walk(folder):\n        rel_root = os.path.relpath(root, os.path.abspath(\"../assets\"))\n        images += [f\"/assets/{rel_root}/{f}\" for f in files if f.lower().endswith((\".jpg\", \".jpeg\", \".png\"))]\n    reptile_images[species] = sorted(images)\n\n# 🖼️ Layout\napp.layout = html.Div([\n    html.H2(\"🦎 Reptile Carousel\", style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div([\n        dcc.Dropdown(\n            id='species-dropdown',\n            options=[{\"label\": s.replace(\"_\", \" \").capitalize(), \"value\": s} for s in REPTILE_SPECIES],\n            value=REPTILE_SPECIES[0],\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Display carousel content based on species\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('species-dropdown', 'value')\n)\ndef update_carousel(species):\n    images = reptile_images.get(species, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"15px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"450px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"15px\"}),\n        ], style={\"display\": \"flex\", \"justifyContent\": \"center\", \"alignItems\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"13px\", \"fontStyle\": \"italic\"})\n    ])\n\n# 🔁 Handle navigation\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Run app\nclear_output(wait=True)\napp.run(port=8169)\n\n\n","type":"content","url":"/animated-being#reptile-carousel","position":11},{"hierarchy":{"lvl1":"🧬 Animated Beings","lvl3":"Mammal Carousel","lvl2":"Explore carousels for various living categories below. Each section features interactive image selectors built using Dash."},"type":"lvl3","url":"/animated-being#mammal-carousel","position":12},{"hierarchy":{"lvl1":"🧬 Animated Beings","lvl3":"Mammal Carousel","lvl2":"Explore carousels for various living categories below. Each section features interactive image selectors built using Dash."},"content":"\n\nfrom dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nimport glob\nfrom IPython.display import clear_output  # ✅ to avoid duplicate display in notebook\n\n# ✅ Tell Dash where to find assets\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"Mammal Carousel\"\n\n# 📦 Paths\nAQUATIC_PATH = \"../assets/mammals/aquatic_mammal\"\nNONAQUATIC_PARENT = \"../assets/mammals\"\n\n# 📦 Load species lists\naquatic_species = []\nnon_aquatic_species = []\n\ntry:\n    if os.path.exists(AQUATIC_PATH):\n        aquatic_species = sorted([\n            d for d in os.listdir(AQUATIC_PATH)\n            if os.path.isdir(os.path.join(AQUATIC_PATH, d))\n        ])\nexcept Exception as e:\n    print(f\"Error loading aquatic species: {e}\")\n\ntry:\n    if os.path.exists(NONAQUATIC_PARENT):\n        non_aquatic_species = sorted([\n            d for d in os.listdir(NONAQUATIC_PARENT)\n            if os.path.isdir(os.path.join(NONAQUATIC_PARENT, d)) and d != \"aquatic_mammal\"\n        ])\nexcept Exception as e:\n    print(f\"Error loading non-aquatic species: {e}\")\n\n# 📦 Load images\nmammal_images = {}\n\ndef load_images(folder, key_prefix):\n    for species in os.listdir(folder):\n        species_path = os.path.join(folder, species)\n        if not os.path.isdir(species_path):\n            continue\n        images = sorted([\n            os.path.abspath(f) for f in glob.glob(os.path.join(species_path, \"**\"), recursive=True)\n            if f.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n        ])\n        if images:\n            mammal_images[f\"{key_prefix}::{species}\"] = images\n\nload_images(AQUATIC_PATH, \"aquatic\")\nload_images(NONAQUATIC_PARENT, \"non_aquatic\")\n\n# 🔑 Default species\ndefault_species_key = list(mammal_images.keys())[0] if mammal_images else None\n\n# 🎯 Dropdown options\ndropdown_options = [\n    {\"label\": k.split(\"::\")[1].replace(\"_\", \" \").title(), \"value\": k}\n    for k in mammal_images.keys()\n]\n\n# --------------------\n# Layout\n# --------------------\napp.layout = html.Div([\n    html.H2(\"🐻 Mammal Carousel\", style={\"textAlign\": \"center\", \"marginBottom\": \"25px\", \"marginTop\": \"10px\"}),\n\n    html.Div([\n        html.Label(\"Select species:\"),\n        dcc.Dropdown(\n            id='species-dropdown',\n            options=dropdown_options,\n            value=default_species_key,\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"40px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# -----------------------------\n# Carousel rendering logic\n# -----------------------------\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('species-dropdown', 'value'),\n    prevent_initial_call=False\n)\ndef update_carousel(species_key):\n    if not species_key or species_key not in mammal_images:\n        return html.P(\"Please select a species.\")\n\n    images = mammal_images[species_key]\n    if not images:\n        return html.P(\"No images available for this species.\")\n\n    filename = os.path.basename(images[0])\n    relative_path = os.path.relpath(images[0], os.path.abspath(\"../assets\"))\n\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0, style={\n                \"frontSize\": \"24px\",\n                \"padding\": \"6px 12px \"\n            }),\n            html.Img(id=\"carousel-image\", src=f\"/assets/{relative_path}\",\n                     style={\"maxHeight\": \"430px\", \"maxWidth\": \"400px\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0, style={\n                \"frontSize\": \"24px\",\n                \"padding\": \"6px 12px \"\n            }),\n        ], style={\"display\": \"flex\", \"justifyContent\": \"center\", \"alignItems\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display')\n    ])\n\n# -----------------------------\n# Navigation buttons\n# -----------------------------\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images available\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    relative_path = os.path.relpath(images[index], os.path.abspath(\"../assets\"))\n    return f\"/assets/{relative_path}\", index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Run\nif __name__ == \"__main__\":\n    clear_output(wait=True)\n    app.run(port=8899)\n\n","type":"content","url":"/animated-being#mammal-carousel","position":13},{"hierarchy":{"lvl1":"🧬 Animated Beings","lvl3":"Insect Carousel","lvl2":"Explore carousels for various living categories below. Each section features interactive image selectors built using Dash."},"type":"lvl3","url":"/animated-being#insect-carousel","position":14},{"hierarchy":{"lvl1":"🧬 Animated Beings","lvl3":"Insect Carousel","lvl2":"Explore carousels for various living categories below. Each section features interactive image selectors built using Dash."},"content":"\n\nfrom dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ✅ Dash config with assets path\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"🐞 Insect Carousel\"\n\n# 📦 Liste des espèces\nINSECT_FOLDER = os.path.abspath(\"../assets/insects\")\nINSECT_SPECIES = sorted([\n    d for d in os.listdir(INSECT_FOLDER)\n    if os.path.isdir(os.path.join(INSECT_FOLDER, d))\n])\n\n# 📦 Dictionnaire {species: [image list]}\ninsect_images = {}\nfor species in INSECT_SPECIES:\n    species_path = os.path.join(INSECT_FOLDER, species)\n    images = []\n    for root, _, files in os.walk(species_path):\n        for f in files:\n            if f.lower().endswith((\".jpg\", \".jpeg\", \".png\")):\n                # Get relative path for browser\n                rel_path = os.path.relpath(os.path.join(root, f), INSECT_FOLDER)\n                web_path = f\"/assets/insects/{rel_path.replace(os.sep, '/')}\"\n                images.append(web_path)\n    insect_images[species] = sorted(images)\n\n# 🖼️ Layout\napp.layout = html.Div([\n    html.H2(\"🐞 Insect Carousel\", style={\"textAlign\": \"center\", \"marginBottom\": \"25px\"}),\n\n    html.Div([\n        html.Label(\"Select insect species:\", style={\n            \"fontWeight\": \"normal\", \"fontSize\": \"15px\", \"marginBottom\": \"8px\"\n        }),\n        dcc.Dropdown(\n            id='species-dropdown',\n            options=[{\"label\": s.replace(\"_\", \" \").capitalize(), \"value\": s} for s in INSECT_SPECIES],\n            value=INSECT_SPECIES[0] if INSECT_SPECIES else None,\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n\n# 🔁 Carousel update\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('species-dropdown', 'value')\n)\ndef update_carousel(species):\n    images = insect_images.get(species, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"24px\", \"padding\": \"5px 10px\", \"marginRight\": \"15px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"430px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"24px\", \"padding\": \"5px 10px\", \"marginLeft\": \"15px\"}),\n        ], style={\"display\": \"flex\", \"justifyContent\": \"center\", \"alignItems\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontStyle\": \"italic\"})\n    ])\n\n# 🔁 Navigation buttons\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Launch\nclear_output(wait=True)\napp.run(port=8454)\n","type":"content","url":"/animated-being#insect-carousel","position":15},{"hierarchy":{"lvl1":""},"type":"lvl1","url":"/intro","position":0},{"hierarchy":{"lvl1":""},"content":"Visual object recognition entails the interpretation of complex, multidimensional semantic information from natural scenes (e.g., an object’s typical appearance, function, and context) and is a central area of investigation in both cognitive neuroscience and artificial intelligence. To enable direct comparison of human and artificial visual processing, and to support the development of computational models of human visual understanding, a critical challenge is the creation of image benchmarks with sufficient scale, ecological validity, and behavioral grounding. Here we present [Dataset Name], a dataset designed to probe visual semantic knowledge through 8,382 naturalistic images spanning over 15 distinct semantic categories. These images feature objects within their typical environmental contexts, and their descriptive labels and category assignments have been rigorously validated through online behavioral experiments. We anticipate that this openly available, large-scale dataset of ecologically valid images will serve as a valuable benchmark for both computational and neuroscientific investigations of visual semantic knowledge and object recognition.\n\nA common practice in psychology and cognitive science has been the use of highly controlled, often artificial stimuli, typically encountered exclusively within laboratory settings. For instance, numerous vision studies have employed images depicting objects isolated from their natural backgrounds, creating a significant discrepancy between experimental stimuli and the rich, contextualized visual environments humans experience daily. This methodological choice not only limits the ecological validity of findings but also presents challenges for computational modeling. The relatively small scale of stimulus sets typically used in human cognitive neuroscience, compared to those employed in machine learning, can impair the development and training of artificial neural networks aiming to model perceptual mechanisms from human brain activity. Furthermore, copyright restrictions often limit the accessibility of image sets used in published research, hindering reproducibility and collaborative efforts.\n\nIn recent years, there has been a growing trend towards utilizing larger and more naturalistic object image datasets in cognitive neuroscience. However, existing resources present their own limitations. Classical databases of object concepts often rely on manually curated, and thus potentially limited or biased, sets of concepts. Similarly, databases of naturalistic object images may consist of objects cropped from their context, or conversely, comprise vast collections of images with variable quality, necessitating extensive manual curation.\n\nThe investigation of semantic knowledge—how humans and artificial systems represent and process meaning (e.g., a lemon’s color, flavor, and typical use)—is a central theme in both cognitive neuroscience and artificial intelligence. To facilitate direct comparisons between human and artificial semantic representations, and to support the advancement of natural language processing (NLP) in modeling human understanding, the development of large-scale, robust benchmarks is critical. Such benchmarks, particularly those incorporating rich visual information, are essential for bridging these disciplines.\n\nHere, we introduce [Dataset Name], a novel dataset comprising 8,382 high-quality, naturalistic images spanning over 15 distinct semantic categories. A key feature of this dataset is its rigorous behavioral validation: using crowdsourcing methodologies, we have confirmed the accuracy of object labels and their corresponding category assignments for each image. The images depict objects within their natural contexts, enhancing ecological validity.\n\n[Dataset Name] is designed to address several of the aforementioned limitations. It offers a large-scale, openly available resource of ecologically valid visual stimuli. We anticipate that this dataset will serve as a valuable tool for researchers in psychology, neuroscience, and computer science. Specifically, it can support investigations into semantic knowledge representation, facilitate the training and benchmarking of computational models of vision and cognition, and promote reproducible research through its open accessibility. This resource aims to bridge the gap between systematic, controlled experimentation and the complexities of real-world perception and understanding.","type":"content","url":"/intro","position":1},{"hierarchy":{"lvl1":"📄 Image10k – Category-Specific Metadata Tables"},"type":"lvl1","url":"/metadata-image10k","position":0},{"hierarchy":{"lvl1":"📄 Image10k – Category-Specific Metadata Tables"},"content":"","type":"content","url":"/metadata-image10k","position":1},{"hierarchy":{"lvl1":"📄 Image10k – Category-Specific Metadata Tables","lvl2":"🙂 Human Faces – Metadata Overview"},"type":"lvl2","url":"/metadata-image10k#id-human-faces-metadata-overview","position":2},{"hierarchy":{"lvl1":"📄 Image10k – Category-Specific Metadata Tables","lvl2":"🙂 Human Faces – Metadata Overview"},"content":"This section displays metadata for all images in the human_face category. Each row includes the file name, source website, license type, author, and a direct link to the original image. The data was curated to ensure proper attribution and licensing.\n\n⚠️ Note: The table below shows a preview of the dataset (first 30 rows). You can access the full metadata and all related files here:\n\n📂 Browse metadata folder on Google Drive\n\nimport pandas as pd\nfrom IPython.display import HTML, display\n\ndef show_with_scroll(df):\n    html = df.to_html(index=False, escape=False)\n    return HTML(f'''\n    <div style=\"height: 400px; overflow: auto; border: 1px solid #ccc;\">\n        {html}\n    </div>\n    ''')\n\n# Load Excel metadata\ndf_faces = pd.read_excel(\"../image10k-dataset/human_face.xlsx\")\n\n# Preview: just the first 30 rows\ndf_preview = df_faces.head(30).copy()\n\n# Optional: shorten long text columns like 'metadata'\nif 'metadata' in df_preview.columns:\n    df_preview['metadata'] = df_preview['metadata'].astype(str).str.slice(0, 150) + '...'\n\n# Display with scroll\ndisplay(show_with_scroll(df_preview))\n\n\n\n","type":"content","url":"/metadata-image10k#id-human-faces-metadata-overview","position":3},{"hierarchy":{"lvl1":"📄 Image10k – Category-Specific Metadata Tables","lvl2":"🧍 Human Body Parts – Metadata Overview"},"type":"lvl2","url":"/metadata-image10k#id-human-body-parts-metadata-overview","position":4},{"hierarchy":{"lvl1":"📄 Image10k – Category-Specific Metadata Tables","lvl2":"🧍 Human Body Parts – Metadata Overview"},"content":"This section displays metadata for images in the human_body_parts category. Each entry includes the filename, license type, source platform, and author information. These images typically depict limbs, torsos, or other anatomical segments, and were annotated with careful attention to attribution and copyright compliance.\n\n⚠️ Note: The table below shows a preview of the dataset (first 30 rows). You can access the full metadata and all related files here:\n\n📂 Browse metadata folder on Google Drive\n\nimport pandas as pd\nfrom IPython.display import HTML, display\n\n# Simple function to show DataFrame with a vertical scrollbar\ndef show_with_scroll(df):\n    html = df.to_html(index=False, escape=False)\n    return HTML(f'''\n    <div style=\"height: 400px; overflow: auto; border: 1px solid #ccc;\">\n        {html}\n    </div>\n    ''')\n\n# Load the Excel metadata\ndf_body = pd.read_excel(\"../image10k-dataset/human_body_parts.xlsx\")\n\n# Preview: show only first 30 rows\ndf_preview = df_body.head(30).copy()\n\n# Optional: shorten long 'metadata' text for cleaner preview\nif 'metadata' in df_preview.columns:\n    df_preview['metadata'] = df_preview['metadata'].astype(str).str.slice(0, 150) + '...'\n\n# Display the table\ndisplay(show_with_scroll(df_preview))\n\n\n\n\n","type":"content","url":"/metadata-image10k#id-human-body-parts-metadata-overview","position":5},{"hierarchy":{"lvl1":"📄 Image10k – Category-Specific Metadata Tables","lvl2":"🐾 Animal Images – Metadata Overview"},"type":"lvl2","url":"/metadata-image10k#id-animal-images-metadata-overview","position":6},{"hierarchy":{"lvl1":"📄 Image10k – Category-Specific Metadata Tables","lvl2":"🐾 Animal Images – Metadata Overview"},"content":"This section contains the metadata for all images in the animal category. Each row corresponds to one image and includes the file name, source website, license type, author and a direct link to the image.\n\n⚠️ Note: The table below shows a preview of the dataset (first 30 rows). You can access the full metadata and all related files here:\n\n📂 Browse metadata folder on Google Drive\n\nimport pandas as pd\nfrom IPython.display import HTML, display\n\n# Function to show a scrollable DataFrame preview\ndef show_with_scroll(df):\n    html = df.to_html(index=False, escape=False)\n    return HTML(f'''\n    <div style=\"height: 400px; overflow: auto; border: 1px solid #ccc;\">\n        {html}\n    </div>\n    ''')\n\n# Load metadata\ndf_animals = pd.read_excel(\"../image10k-dataset/animal.xlsx\")\n\n# Preview: show only first 30 rows\ndf_preview = df_animals.head(30).copy()\n\n# Truncate long 'metadata' values\nif 'metadata' in df_preview.columns:\n    df_preview['metadata'] = df_preview['metadata'].astype(str).str.slice(0, 150) + '...'\n\n# Display preview with scroll\ndisplay(show_with_scroll(df_preview))\n\n\n\n\n","type":"content","url":"/metadata-image10k#id-animal-images-metadata-overview","position":7},{"hierarchy":{"lvl1":"📄 Image10k – Category-Specific Metadata Tables","lvl2":"🧩 Objects – Metadata Overview"},"type":"lvl2","url":"/metadata-image10k#id-objects-metadata-overview","position":8},{"hierarchy":{"lvl1":"📄 Image10k – Category-Specific Metadata Tables","lvl2":"🧩 Objects – Metadata Overview"},"content":"This section contains metadata for all images in the object category. These images represent a wide variety of man-made and natural objects, each annotated with information such as source, author, license type, and file extension. The data was curated to ensure proper attribution and licensing.\n\n⚠️ Note: The table below shows a preview of the dataset (first 30 rows). You can access the full metadata and all related files here:\n\n📂 Browse metadata folder on Google Drive\n\nimport pandas as pd\nfrom IPython.display import HTML, display\n\n# Function to show a scrollable DataFrame preview\ndef show_with_scroll(df):\n    html = df.to_html(index=False, escape=False)\n    return HTML(f'''\n    <div style=\"height: 400px; overflow: auto; border: 1px solid #ccc;\">\n        {html}\n    </div>\n    ''')\n\n# Load metadata\ndf_objects = pd.read_excel(\"../image10k-dataset/object.xlsx\")\n\n# Preview: show only first 30 rows\ndf_preview = df_objects.head(30).copy()\n\n# Truncate long 'metadata' text\nif 'metadata' in df_preview.columns:\n    df_preview['metadata'] = df_preview['metadata'].astype(str).str.slice(0, 150) + '...'\n\n# Display preview with scroll\ndisplay(show_with_scroll(df_preview))\n\n\n","type":"content","url":"/metadata-image10k#id-objects-metadata-overview","position":9},{"hierarchy":{"lvl1":"Projet Image10k"},"type":"lvl1","url":"/paper","position":0},{"hierarchy":{"lvl1":"Projet Image10k"},"content":"Images10k is an open, human-annotated dataset comprising 8,382 high-quality, natural images across 15 object categories. Each image portrays its subject in its typical environment and has been validated via online behavioral experiments to ensure label accuracy and contextual relevance.\n\nOn this page, you’ll find:\n\nInteractive Carousels – Image galleries organized by semantic category for easy browsing.\n\nImage Collection & Annotation – A step-by-step overview of our data acquisition and labeling pipeline.\n\nSummary Statistics & Validation – Key metrics and behavioral results confirming dataset reliability.\n\nMetadata Showcase – Detailed metadata for each image, including labels, category assignments, and validation scores.","type":"content","url":"/paper","position":1}]}
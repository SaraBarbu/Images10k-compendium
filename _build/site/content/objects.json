{"version":2,"kind":"Notebook","sha256":"81ae4e1a9be3d97da476912fb1c865925812a81cdb494e700e0a037d616daae3","slug":"objects","location":"/content/Objects.ipynb","dependencies":[],"frontmatter":{"title":"🧱 Objects","content_includes_title":false,"kernelspec":{"name":"datalad-env","display_name":"Python (datalad-env)","language":"python"},"authors":[{"nameParsed":{"literal":"Lune P Bellec","given":"Lune P","family":"Bellec"},"name":"Lune P Bellec","orcid":"0000-0002-9111-0699","corresponding":false,"equal_contributor":false,"email":"lune.bellec@umontreal.ca","roles":["Conceptualization","Software","Writing – original draft"],"affiliations":["udem"],"url":"https://github.com/pbellec","github":"lbellec","id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"Sara Barbu","given":"Sara","family":"Barbu"},"name":"Sara Barbu","orcid":"0009-0009-1808-375X","equal_contributor":false,"email":"sara.barbu@umontreal.ca","roles":["Software","Writing – review & editing"],"affiliations":["udem"],"github":"SaraBarbu","id":"contributors-myst-generated-uid-1","corresponding":true}],"doi":"10.55458/neurolibre.xxxxx","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"MIT","url":"https://opensource.org/licenses/MIT","name":"MIT License","free":true,"osi":true}},"github":"https://github.com/courtois-neuromod/image10k.paper","subject":"Living Preprint","venue":{"title":"Neurolibre"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true}},"keywords":["image stimuli","annotation","crowdsourcing"],"affiliations":[{"id":"udem","name":"Université de Montréąl","department":"Psychology","address":"2900 Bd Édouard-Montpetit","city":"Montreal","state":"Quebec","postal_code":"H3T 1J4","country":"Canada","isni":"0000 0004 0435 3292","ror":"https://ror.org/0161xgx34","phone":"(514) 343-6111"}],"abbreviations":{"MyST":"Markedly Structured Markdown"},"edit_url":"https://github.com/courtois-neuromod/image10k.paper/blob/main/content/Objects.ipynb","exports":[{"format":"ipynb","filename":"Objects.ipynb","url":"/Objects-5473206254b0362076c5a82efc76c8a0.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"uXrrgs6Jjp"}],"identifier":"explore-carousels-of-non-living-items-below-each-section-features-interactive-image-selectors-built-using-dash","label":"Explore carousels of non-living items below. Each section features interactive image selectors built using Dash.","html_id":"explore-carousels-of-non-living-items-below-each-section-features-interactive-image-selectors-built-using-dash","implicit":true,"enumerator":"1","key":"ykcuiDF6Bh"}],"key":"SRLH3CD7oW"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Clothing Carousel","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"Io5QIXjRG2"}],"identifier":"clothing-carousel","label":"Clothing Carousel","html_id":"clothing-carousel","implicit":true,"enumerator":"1.1","key":"YnqwUARFus"}],"key":"w6Je0qOLcH"},{"type":"block","kind":"notebook-code","data":{"scrolled":true,"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\n\napp.title = \"👥 Clothing Carousel\"\n\n# 📦 Liste des sous-catégories de vêtements\nCLOTHING_PATH = os.path.abspath(\"../assets/object/clothing\")\nCLOTHING_ITEMS = sorted([\n    item for item in os.listdir(CLOTHING_PATH)\n    if os.path.isdir(os.path.join(CLOTHING_PATH, item))\n])\n\n# 📦 Dictionnaire {item: [liste d’images]}\nclothing_images = {\n    item: sorted([\n        os.path.join(CLOTHING_PATH, item, img)\n        for img in os.listdir(os.path.join(CLOTHING_PATH, item))\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for item in CLOTHING_ITEMS\n}\n\n# 🎨 Layout\napp.layout = html.Div([\n    html.H2(\"\\ud83d\\udc65 Clothing Carousel\", style={\n        \"textAlign\": \"center\", \"marginBottom\": \"10px\", \"marginTop\": \"5px\",\n        \"fontSize\": \"22px\", \"fontWeight\": \"bold\", \"fontFamily\": \"Georgia, serif\"\n    }),\n\n    html.Div([\n        html.Label(\"Select clothing item:\", style={\n            \"fontSize\": \"16px\", \"marginBottom\": \"6px\", \"fontFamily\": \"Georgia, serif\"\n        }),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\"label\": item.replace(\"_\", \" \").capitalize(), \"value\": item} for item in CLOTHING_ITEMS],\n            value=CLOTHING_ITEMS[0],\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\", \"fontFamily\": \"Georgia, serif\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n], style={\"fontFamily\": \"Georgia, serif\", \"padding\": \"20px\"})\n\n# 🔄 Affichage du carousel\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = clothing_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n    relative_path = os.path.relpath(images[0], os.path.abspath(\"../assets\"))\n\n    return html.Div([\n        html.Div([\n            html.Button(\"\\u2b05\\ufe0f\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"15px\"}),\n            html.Img(id=\"carousel-image\", src=f\"/assets/{relative_path}\",\n                     style={\"height\": \"415px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"\\u27a1\\ufe0f\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"15px\"}),\n        ], style={\"display\": \"flex\", \"justifyContent\": \"center\", \"alignItems\": \"center\",\"maxWidth\": \"100%\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontFamily\": \"Georgia, serif\", \"color\": \"#444\"})\n    ])\n\n# 🔄 Navigation flèches\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    relative_path = os.path.relpath(images[index], os.path.abspath(\"../assets\"))\n    return f\"/assets/{relative_path}\", index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Lancer l'app \nif __name__ == \"__main__\":\n    clear_output(wait=True)\n    app.run(port=8170)","visibility":"hide","key":"fTcEJZSAaX"},{"type":"output","id":"Rrvt5LOYtiQI4uGqcdXTq","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"\n        <iframe\n            width=\"100%\"\n            height=\"650\"\n            src=\"http://127.0.0.1:8170/\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        ","content_type":"text/html"},"text/plain":{"content":"<IPython.lib.display.IFrame at 0x7f29de20bf40>","content_type":"text/plain"}}}],"visibility":"show","key":"DXxgcvZT2Y"}],"visibility":"show","key":"mDn9FgALi3"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Decoration Carousel","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BcpQEFIK4T"}],"identifier":"decoration-carousel","label":"Decoration Carousel","html_id":"decoration-carousel","implicit":true,"enumerator":"1.2","key":"oKWvIIGJjA"}],"key":"QDkjjmv2wG"},{"type":"block","kind":"notebook-code","data":{"scrolled":true,"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ✅ Tell Dash to look for assets one level up\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\n\napp.title = \"🎀 Decoration Carousel\"\n\n# 📦 Sous-catégories dans assets/object/decoration/\nDECORATION_PATH = os.path.abspath(\"../assets/object/decoration\")\nDECORATION_ITEMS = sorted([\n    item for item in os.listdir(DECORATION_PATH)\n    if os.path.isdir(os.path.join(DECORATION_PATH, item))\n])\n\n# 📦 Dictionnaire {item: [liste d’images]}\ndecoration_images = {\n    item: sorted([\n        os.path.join(DECORATION_PATH, item, img)\n        for img in os.listdir(os.path.join(DECORATION_PATH, item))\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for item in DECORATION_ITEMS\n}\n\n# 🎨 Layout principal\napp.layout = html.Div([\n    html.H2(\"\\ud83c\\udf80 Decoration Carousel\", style={\n        \"textAlign\": \"center\", \"marginBottom\": \"25px\", \"marginTop\": \"10px\", \"overflowY\": \"hidden\",\n        \"fontSize\": \"22px\", \"fontWeight\": \"bold\", \"fontFamily\": \"Georgia, serif\"\n    }),\n\n    html.Div([\n        html.Label(\"Select decoration item:\", style={\n            \"fontSize\": \"16px\", \"marginBottom\": \"6px\", \"fontFamily\": \"Georgia, serif\"\n        }),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\n                \"label\": item.replace(\"_\", \" \").capitalize(),\n                \"value\": item\n            } for item in DECORATION_ITEMS],\n            value=DECORATION_ITEMS[0],\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\", \"fontFamily\": \"Georgia, serif\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n], style={\"fontFamily\": \"Georgia, serif\", \"padding\": \"20px\"})\n\n# 🔄 Afficher le bon carousel\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = decoration_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n    relative_path = os.path.relpath(images[0], os.path.abspath(\"../assets\"))\n\n    return html.Div([\n        html.Div([\n            html.Button(\"\\u2b05\\ufe0f\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"16px\", \"padding\": \"5px 10px\", \"marginRight\": \"15px\"}),\n            html.Img(id=\"carousel-image\", src=f\"/assets/{relative_path}\",\n                     style={\"height\": \"409px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"\\u27a1\\ufe0f\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"16px\", \"padding\": \"5px 10px\", \"marginLeft\": \"15px\"}),\n        ], style={\"display\": \"flex\", \"justifyContent\": \"center\", \"alignItems\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontFamily\": \"Georgia, serif\", \"color\": \"#444\"})\n    ])\n\n# 🔄 Navigation flèches\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    relative_path = os.path.relpath(images[index], os.path.abspath(\"../assets\"))\n    return f\"/assets/{relative_path}\", index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Lancer \nif __name__ == \"__main__\":\n    clear_output(wait=True)\n    app.run(port=8204)","visibility":"hide","key":"tSWPFWVL8w"},{"type":"output","id":"PCetfBu0D7Npjsbp4loZb","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"\n        <iframe\n            width=\"100%\"\n            height=\"650\"\n            src=\"http://127.0.0.1:8204/\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        ","content_type":"text/html"},"text/plain":{"content":"<IPython.lib.display.IFrame at 0x7f29fc1c2860>","content_type":"text/plain"}}}],"visibility":"show","key":"IvnngLc8yV"}],"visibility":"show","key":"lZz43KtsdN"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Food Carousel","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"hhchugUiRn"}],"identifier":"food-carousel","label":"Food Carousel","html_id":"food-carousel","implicit":true,"enumerator":"1.3","key":"BYbNRkD8rN"}],"key":"woezJYcXdd"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ✅ Dash setup with proper assets path\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"🍽️ Food & Produce Carousel\"\n\n# 📦 Corrected category paths\nCATEGORY_MAP = {\n    \"Prepared food\": \"../assets/object/food\",\n    \"Fruit\": \"../assets/object/fruit\",\n    \"Vegetable\": \"../assets/object/vegetable\"\n}\n\n# 📦 List items per category\ncategory_items = {\n    label: sorted([\n        item for item in os.listdir(path)\n        if os.path.isdir(os.path.join(path, item))\n    ])\n    for label, path in CATEGORY_MAP.items()\n}\n\n# 📦 {(category, item): [list of image paths]}\nimage_lookup = {}\nfor category, path in CATEGORY_MAP.items():\n    for item in category_items[category]:\n        full_path = os.path.join(path, item)\n        image_lookup[(category, item)] = sorted([\n            f\"{full_path}/{img}\"\n            for img in os.listdir(full_path)\n            if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n        ])\n\n# 🖼️ Layout\napp.layout = html.Div([\n    html.H2(\"🍽️ Food & Produce Carousel\", style={\n        \"textAlign\": \"center\", \"marginBottom\": \"10px\", \"marginTop\": \"5px\",\n        \"fontSize\": \"22px\", \"fontWeight\": \"bold\", \"fontFamily\": \"Georgia, serif\"\n    }),\n\n    html.Div([\n        html.Label(\"Select category:\", style={\"fontWeight\": \"bold\", \"marginBottom\": \"6px\"}),\n        dcc.Dropdown(\n            id='category-dropdown',\n            options=[{\"label\": cat, \"value\": cat} for cat in CATEGORY_MAP],\n            value=\"Prepared food\",\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"16px\"}),\n\n    html.Div(id='item-dropdown-container', style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Update item dropdown based on category\n@app.callback(\n    Output('item-dropdown-container', 'children'),\n    Input('category-dropdown', 'value')\n)\ndef update_item_dropdown(category):\n    items = category_items.get(category, [])\n    return html.Div([\n        html.Label(\"Select item:\", style={\"fontWeight\": \"bold\", \"marginBottom\": \"6px\"}),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\"label\": item.replace(\"_\", \" \").capitalize(), \"value\": item} for item in items],\n            value=items[0] if items else None,\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ])\n\n# 🔁 Carousel content\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('category-dropdown', 'value'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(category, item):\n    images = image_lookup.get((category, item), [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"20px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"415px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"20px\"}),\n        ], style={\"textAlign\": \"center\", \"marginBottom\": \"12px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"13px\", \"fontStyle\": \"italic\", \"fontFamily\": \"Georgia, serif\"})\n    ])\n\n# 🔁 Navigation buttons\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Launch \nif __name__ == \"__main__\":\n    clear_output(wait=True)\n    app.run(port=8802)","visibility":"hide","key":"Kvn33l6cZC"},{"type":"output","id":"Eh7SZJ4tRcHHtPdIaK3Cv","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"\n        <iframe\n            width=\"100%\"\n            height=\"650\"\n            src=\"http://127.0.0.1:8802/\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        ","content_type":"text/html"},"text/plain":{"content":"<IPython.lib.display.IFrame at 0x7f29de20b550>","content_type":"text/plain"}}}],"visibility":"show","key":"vTSv7G5bUH"}],"visibility":"show","key":"p1YEA9fkZ3"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Furniture Carousel","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"gNMmiD4h85"}],"identifier":"furniture-carousel","label":"Furniture Carousel","html_id":"furniture-carousel","implicit":true,"enumerator":"1.4","key":"SnFxrKkrMr"}],"key":"tWK0jBzImL"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ✅ Debug: Print current working directory and paths\nprint(\"Current working directory:\", os.getcwd())\nprint(\"Checking furniture directory paths...\")\n\n# Try multiple possible paths\npossible_paths = [\n    os.path.abspath(\"../assets/object/furniture\"),\n    os.path.abspath(\"assets/object/furniture\"),\n    os.path.abspath(\"./assets/object/furniture\"),\n    os.path.join(os.getcwd(), \"assets/object/furniture\"),\n    os.path.join(os.getcwd(), \"../assets/object/furniture\")\n]\n\nFURNITURE_DIR = None\nfor path in possible_paths:\n    print(f\"Trying path: {path}\")\n    if os.path.exists(path):\n        FURNITURE_DIR = path\n        print(f\"✅ Found furniture directory at: {path}\")\n        break\n    else:\n        print(f\"❌ Path does not exist: {path}\")\n\nif not FURNITURE_DIR:\n    print(\"❌ Could not find furniture directory!\")\n    FURNITURE_ITEMS = []\n    furniture_images = {}\nelse:\n    # 📦 List furniture categories\n    FURNITURE_ITEMS = sorted([\n        item for item in os.listdir(FURNITURE_DIR)\n        if os.path.isdir(os.path.join(FURNITURE_DIR, item))\n    ])\n    print(f\"Found furniture items: {FURNITURE_ITEMS}\")\n\n# Try multiple asset folder configurations\nasset_folders = [\n    os.path.abspath(\"../assets\"),\n    os.path.abspath(\"assets\"),\n    os.path.abspath(\"./assets\"),\n    os.path.join(os.getcwd(), \"assets\"),\n    os.path.join(os.getcwd(), \"../assets\")\n]\n\nASSETS_FOLDER = None\nfor folder in asset_folders:\n    if os.path.exists(folder):\n        ASSETS_FOLDER = folder\n        print(f\"✅ Using assets folder: {folder}\")\n        break\n\n# ✅ Create Dash app with multiple fallback configurations\napp = JupyterDash(\n    __name__,\n    assets_folder=ASSETS_FOLDER if ASSETS_FOLDER else None,\n    suppress_callback_exceptions=True\n)\napp.title = \"🪑 Furniture Carousel\"\n\n# 📸 Build image dictionary with multiple path formats\nfurniture_images = {}\nif FURNITURE_DIR and FURNITURE_ITEMS:\n    for item in FURNITURE_ITEMS:\n        item_path = os.path.join(FURNITURE_DIR, item)\n        if os.path.exists(item_path):\n            images = []\n            for img in os.listdir(item_path):\n                if img.lower().endswith((\".jpg\", \".jpeg\", \".png\", \".gif\", \".bmp\", \".webp\")):\n                    # Store the full absolute path for now\n                    full_path = os.path.join(item_path, img)\n                    images.append(full_path)\n            furniture_images[item] = sorted(images)\n            print(f\"{item}: {len(images)} images found\")\n\n# 🎨 Layout\napp.layout = html.Div([\n    html.H2(\"🪑 Furniture Carousel\", style={\n        \"textAlign\": \"center\", \"marginBottom\": \"10px\", \"marginTop\": \"5px\",\n        \"fontSize\": \"22px\", \"fontWeight\": \"bold\", \"fontFamily\": \"Georgia, serif\"\n    }),\n    \n    html.Div([\n        html.Label(\"Select furniture item:\", style={\n            \"fontWeight\": \"normal\", \"display\": \"block\", \"marginBottom\": \"6px\",\n            \"fontSize\": \"15px\", \"fontFamily\": \"Georgia, serif\"\n        }),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\"label\": item.replace(\"_\", \" \").capitalize(), \"value\": item} for item in FURNITURE_ITEMS],\n            value=FURNITURE_ITEMS[0] if FURNITURE_ITEMS else None,\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n    \n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"}),\n    \n\n])\n\n# 🔁 Display carousel\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    if not item:\n        return html.P(\"Please select a furniture item.\", style={\"textAlign\": \"center\"})\n    \n    images = furniture_images.get(item, [])\n    \n    if not images:\n        return html.P(f\"No images available for {item}.\", style={\"textAlign\": \"center\"})\n    \n    # Convert absolute path to relative path for web serving\n    image_urls = []\n    for img_path in images:\n        # Try multiple URL formats\n        relative_path = os.path.relpath(img_path, os.getcwd())\n        web_path = relative_path.replace(\"\\\\\", \"/\")  # Convert Windows paths\n        \n        # Remove leading ../ if present and try different formats\n        url_attempts = [\n            f\"/{web_path}\",\n            web_path,\n            f\"/assets/{web_path.split('assets/')[-1]}\" if 'assets/' in web_path else None,\n            f\"assets/{web_path.split('assets/')[-1]}\" if 'assets/' in web_path else None\n        ]\n        \n        # Use the first non-None attempt\n        img_url = next((url for url in url_attempts if url), web_path)\n        image_urls.append(img_url)\n    \n    filename = os.path.basename(images[0])\n    \n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"20px\"}),\n            html.Img(id=\"carousel-image\", \n                     src=image_urls[0],\n                     style={\"height\": \"415px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"20px\"}),\n        ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n        \n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=image_urls),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontStyle\": \"italic\", \"fontFamily\": \"Georgia, serif\"})\n    ])\n\n# 🔁 Navigation arrows\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n    \n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n    \n    # Get the original filename from the path\n    original_paths = list(furniture_images.values())\n    if original_paths:\n        filename = os.path.basename(original_paths[0][index] if len(original_paths[0]) > index else \"unknown\")\n    else:\n        filename = \"unknown\"\n    \n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Launch\nclear_output(wait=True)\napp.run(port=8125)","visibility":"hide","key":"sysgoCQ4rF"},{"type":"output","id":"bWxUHQNTL57-aXKDs3qSR","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"\n        <iframe\n            width=\"100%\"\n            height=\"650\"\n            src=\"http://127.0.0.1:8125/\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        ","content_type":"text/html"},"text/plain":{"content":"<IPython.lib.display.IFrame at 0x7f29dd067ee0>","content_type":"text/plain"}}}],"visibility":"show","key":"DQyzJLQVeR"}],"visibility":"show","key":"gKsOAEQJik"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Game Carousel","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"TIs7A6aGLR"}],"identifier":"game-carousel","label":"Game Carousel","html_id":"game-carousel","implicit":true,"enumerator":"1.5","key":"NzL4KXWsMF"}],"key":"kuhk4PSWEW"},{"type":"block","kind":"notebook-code","data":{"scrolled":true,"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ✅ Dash config with parent asset path\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"🎮 Game Carousel\"\n\n# 📦 Absolute path to assets/object/game\nGAME_PATH = os.path.abspath(\"../assets/object/game\")\n\n# 📦 Load available game items\nGAME_ITEMS = []\nif os.path.exists(GAME_PATH):\n    GAME_ITEMS = sorted([\n        item for item in os.listdir(GAME_PATH)\n        if os.path.isdir(os.path.join(GAME_PATH, item))\n    ])\n\n# 📦 Map game items to image paths\ngame_images = {\n    item: sorted([\n        f\"/assets/object/game/{item}/{img}\"\n        for img in os.listdir(os.path.join(GAME_PATH, item))\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for item in GAME_ITEMS\n}\n\n# 🖼️ Layout\napp.layout = html.Div([\n    html.H2(\"🎮 Game Carousel\", style={\n        \"textAlign\": \"center\", \"marginBottom\": \"25px\", \"marginTop\": \"10px\",\n        \"fontSize\": \"22px\", \"fontWeight\": \"bold\", \"fontFamily\": \"Georgia, serif\"\n    }),\n\n    html.Div([\n        html.Label(\"Select game item:\", style={\n            \"fontWeight\": \"normal\", \"display\": \"block\", \"marginBottom\": \"6px\",\n            \"fontSize\": \"15px\", \"fontFamily\": \"Georgia, serif\"\n        }),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\"label\": item.replace(\"_\", \" \").capitalize(), \"value\": item} for item in GAME_ITEMS],\n            value=GAME_ITEMS[0] if GAME_ITEMS else None,\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Carousel display\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = game_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"20px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"430px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"20px\"}),\n        ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontStyle\": \"italic\", \"fontFamily\": \"Georgia, serif\"})\n    ])\n\n# 🔁 Navigation\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Launch app\nif __name__ == \"__main__\":\n    clear_output(wait=True)\n    app.run(port=8160)","visibility":"hide","key":"JuG4UaM84n"},{"type":"output","id":"fpzkEjHWa7Zr3he2FkDrx","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"\n        <iframe\n            width=\"100%\"\n            height=\"650\"\n            src=\"http://127.0.0.1:8160/\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        ","content_type":"text/html"},"text/plain":{"content":"<IPython.lib.display.IFrame at 0x7f29dd066290>","content_type":"text/plain"}}}],"visibility":"show","key":"xk6hmQxCEL"}],"visibility":"show","key":"nQDjAFMQJh"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Household Appliance Carousel","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"LCHqtrfYQv"}],"identifier":"household-appliance-carousel","label":"Household Appliance Carousel","html_id":"household-appliance-carousel","implicit":true,"enumerator":"1.6","key":"ftqDxaEYfr"}],"key":"vYuVm7nZlP"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ✅ Configure Dash to use assets folder one level up\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"🧺 Household Appliance Carousel\"\n\n# 📦 Absolute path to the images\nAPPLIANCE_PATH = os.path.abspath(\"../assets/object/household_appliance\")\n\n# 📦 Load appliance categories\nAPPLIANCE_ITEMS = []\nif os.path.exists(APPLIANCE_PATH):\n    APPLIANCE_ITEMS = sorted([\n        item for item in os.listdir(APPLIANCE_PATH)\n        if os.path.isdir(os.path.join(APPLIANCE_PATH, item))\n    ])\n\n# 📦 Build image list\nappliance_images = {\n    item: sorted([\n        f\"/assets/object/household_appliance/{item}/{img}\"\n        for img in os.listdir(os.path.join(APPLIANCE_PATH, item))\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for item in APPLIANCE_ITEMS\n}\n\n# 🖼️ Layout\napp.layout = html.Div([\n    html.H2(\"🧺 Household Appliance Carousel\", style={\n        \"textAlign\": \"center\", \"marginBottom\": \"10px\", \"marginTop\": \"5px\",\n        \"fontSize\": \"22px\", \"fontWeight\": \"bold\", \"fontFamily\": \"Georgia, serif\"\n    }),\n\n    html.Div([\n        html.Label(\"Select appliance:\", style={\n            \"fontWeight\": \"normal\", \"display\": \"block\", \"marginBottom\": \"6px\",\n            \"fontSize\": \"15px\", \"fontFamily\": \"Georgia, serif\"\n        }),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\"label\": item.replace(\"_\", \" \").capitalize(), \"value\": item} for item in APPLIANCE_ITEMS],\n            value=APPLIANCE_ITEMS[0] if APPLIANCE_ITEMS else None,\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Carousel content\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = appliance_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"20px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"420px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"20px\"}),\n        ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontStyle\": \"italic\", \"fontFamily\": \"Georgia, serif\"})\n    ])\n\n# 🔁 Navigation logic\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Launch app\nif __name__ == \"__main__\":\n    clear_output(wait=True)\n    app.run(port=8163)","visibility":"hide","key":"VFZDLcmwdT"},{"type":"output","id":"ZSh2pZVyYCbGtRMA4GIar","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"\n        <iframe\n            width=\"100%\"\n            height=\"650\"\n            src=\"http://127.0.0.1:8163/\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        ","content_type":"text/html"},"text/plain":{"content":"<IPython.lib.display.IFrame at 0x7f29dd065ea0>","content_type":"text/plain"}}}],"visibility":"show","key":"AlEP3JyITK"}],"visibility":"show","key":"lH5imTcwu5"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Electronic Device Carousel","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"USSbfbipMK"}],"identifier":"electronic-device-carousel","label":"Electronic Device Carousel","html_id":"electronic-device-carousel","implicit":true,"enumerator":"1.7","key":"a1d7oMGjeo"}],"key":"ZCsG9N5uiA"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ✅ Configuration Dash (assets one level up)\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\n\napp.title = \"⚡ Electronic Device Carousel\"\n\n# 📦 Sous-catégories\nELECTRONIC_ITEMS = sorted([\n    item for item in os.listdir(\"../assets/object/electronic_device\")\n    if os.path.isdir(f\"../assets/object/electronic_device/{item}\")\n])\n\n# 📦 Dictionnaire {item: [images]}\nelectronic_images = {\n    item: sorted([\n        os.path.abspath(f\"../assets/object/electronic_device/{item}/{img}\")\n        for img in os.listdir(f\"../assets/object/electronic_device/{item}\")\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for item in ELECTRONIC_ITEMS\n}\n\n# 🎨 Layout\napp.layout = html.Div([\n    html.H2(\"⚡ Electronic Device Carousel\", style={\n        \"textAlign\": \"center\", \"marginBottom\": \"10px\", \"marginTop\": \"5px\",\n        \"fontSize\": \"22px\", \"fontWeight\": \"bold\", \"fontFamily\": \"Georgia, serif\"\n    }),\n\n    html.Div([\n    html.Label(\"Select electronic device:\", style={\n        \"marginBottom\": \"6px\", \"fontSize\": \"15px\", \"fontStyle\": \"normal\"\n    }),\n    dcc.Dropdown(\n        id='item-dropdown',\n        options=[{\"label\": item.replace(\"_\", \" \").capitalize(), \"value\": item} for item in ELECTRONIC_ITEMS],\n        value=ELECTRONIC_ITEMS[0],\n        clearable=False,\n        style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n    )\n], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Affiche carousel\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = electronic_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n    relative_path = os.path.relpath(images[0], os.path.abspath(\"../assets\"))\n    dash_path = f\"/assets/{relative_path}\"\n\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"20px\"}),\n\n            html.Img(id=\"carousel-image\", src=dash_path,\n                     style={\"height\": \"420px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"20px\"}),\n        ], style={\"textAlign\": \"center\", \"marginBottom\": \"15px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"13px\", \"fontFamily\": \"Georgia, serif\"})\n    ])\n\n# 🔁 Navigation\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    relative_path = os.path.relpath(images[index], os.path.abspath(\"../assets\"))\n    return f\"/assets/{relative_path}\", index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Lancer\nif __name__ == \"__main__\":\n    clear_output(wait=True)\n    app.run(port=8806)","visibility":"hide","key":"JmRsiEAC5T"},{"type":"output","id":"eiSoyHYVQpJEI4OA5zruB","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"\n        <iframe\n            width=\"100%\"\n            height=\"650\"\n            src=\"http://127.0.0.1:8806/\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        ","content_type":"text/html"},"text/plain":{"content":"<IPython.lib.display.IFrame at 0x7f29fc1c7490>","content_type":"text/plain"}}}],"visibility":"show","key":"Qblom9YKfh"}],"visibility":"show","key":"GErPGnfuYG"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Kitchenware Carousel","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"FvMD1OWFie"}],"identifier":"kitchenware-carousel","label":"Kitchenware Carousel","html_id":"kitchenware-carousel","implicit":true,"enumerator":"1.8","key":"vzYmt6iygZ"}],"key":"VdvEax7j9n"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dash import dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\n\n# ✅ Dash config with correct asset path\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"🍽️ Kitchenware Carousel\"\n\n# 📂 Load kitchenware categories\nKITCHENWARE_DIR = os.path.abspath(\"../assets/object/kitchenware\")\nKITCHENWARE_ITEMS = sorted([\n    item for item in os.listdir(KITCHENWARE_DIR)\n    if os.path.isdir(os.path.join(KITCHENWARE_DIR, item))\n])\n\n# 📸 Load images into a dictionary {item: [image paths]}\nkitchenware_images = {\n    item: sorted([\n        f\"/assets/object/kitchenware/{item}/{img}\"\n        for img in os.listdir(os.path.join(KITCHENWARE_DIR, item))\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for item in KITCHENWARE_ITEMS\n}\n\n# 🖼️ Layout\napp.layout = html.Div([\n    html.H2(\"🍽️ Kitchenware Carousel\", style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div([\n        html.Label(\"Select kitchenware item:\", style={\n            \"fontWeight\": \"normal\", \"display\": \"block\", \"marginBottom\": \"8px\"\n        }),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\"label\": item.replace(\"_\", \" \").capitalize(), \"value\": item} for item in KITCHENWARE_ITEMS],\n            value=KITCHENWARE_ITEMS[0],\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Update carousel on selection\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = kitchenware_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"20px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"420px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"20px\"}),\n        ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontStyle\": \"italic\"})\n    ])\n\n# 🔁 Arrows navigation\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Launch app\napp.run(port=8987)","visibility":"hide","key":"YcUyE00qJq"},{"type":"output","id":"AJuB5kDvJwF9oPrhFXo4G","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"\n        <iframe\n            width=\"100%\"\n            height=\"650\"\n            src=\"http://127.0.0.1:8987/\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        ","content_type":"text/html"},"text/plain":{"content":"<IPython.lib.display.IFrame at 0x7f29dd089a80>","content_type":"text/plain"}}}],"visibility":"show","key":"QDmpGsmuoj"}],"visibility":"show","key":"odVrTz1Jcr"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Jewlery Carousel","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"BKyDTJOgjk"}],"identifier":"jewlery-carousel","label":"Jewlery Carousel","html_id":"jewlery-carousel","implicit":true,"enumerator":"1.9","key":"U6EWPyRHAm"}],"key":"Kcrb5bcONg"},{"type":"block","kind":"notebook-code","data":{"scrolled":true,"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dash import dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\n\n# ✅ Dash config with correct asset path\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"💍 Jewelry Carousel\"\n\n# 📦 Load jewelry item folders\nJEWELRY_DIR = os.path.abspath(\"../assets/object/jewelry\")\nJEWELRY_ITEMS = sorted([\n    item for item in os.listdir(JEWELRY_DIR)\n    if os.path.isdir(os.path.join(JEWELRY_DIR, item))\n])\n\n# 📦 Dictionary: {item: [list of image paths]}\njewelry_images = {\n    item: sorted([\n        f\"/assets/object/jewelry/{item}/{img}\"\n        for img in os.listdir(os.path.join(JEWELRY_DIR, item))\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for item in JEWELRY_ITEMS\n}\n\n# 🖼️ Layout\napp.layout = html.Div([\n    html.H2(\"💍 Jewelry Carousel\", style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div([\n        html.Label(\"Select jewelry item:\", style={\n            \"fontWeight\": \"bold\", \"display\": \"block\", \"marginBottom\": \"8px\"\n        }),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\"label\": item.replace(\"_\", \" \").capitalize(), \"value\": item} for item in JEWELRY_ITEMS],\n            value=JEWELRY_ITEMS[0],\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Update carousel on dropdown change\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = jewelry_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"20px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"430px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"20px\"}),\n        ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontStyle\": \"italic\"})\n    ])\n\n# 🔁 Handle left/right navigation\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Run app\napp.run(port=8234)","visibility":"hide","key":"h5Yywvz2aD"},{"type":"output","id":"n2_MD9QVyDYAFByCOpb95","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"\n        <iframe\n            width=\"100%\"\n            height=\"650\"\n            src=\"http://127.0.0.1:8234/\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        ","content_type":"text/html"},"text/plain":{"content":"<IPython.lib.display.IFrame at 0x7f29de286710>","content_type":"text/plain"}}}],"visibility":"show","key":"rbiEroBETW"}],"visibility":"show","key":"L64SXwgREi"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Musical Instrument Carousel","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NK0jDuJFcK"}],"identifier":"musical-instrument-carousel","label":"Musical Instrument Carousel","html_id":"musical-instrument-carousel","implicit":true,"enumerator":"1.10","key":"ePMmB8Bqta"}],"key":"D0MDxHIHW2"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dash import dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\n\n# ✅ Dash config with parent asset path\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"🎶 Musical Instrument Carousel\"\n\n# 📂 Load musical instrument categories\nMUSIC_DIR = os.path.abspath(\"../assets/object/musical_instrument\")\nMUSICAL_ITEMS = sorted([\n    item for item in os.listdir(MUSIC_DIR)\n    if os.path.isdir(os.path.join(MUSIC_DIR, item))\n])\n\n# 📸 Dictionary {item: list of images}\nmusical_images = {\n    item: sorted([\n        f\"/assets/object/musical_instrument/{item}/{img}\"\n        for img in os.listdir(os.path.join(MUSIC_DIR, item))\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for item in MUSICAL_ITEMS\n}\n\n# 🖼️ Layout\napp.layout = html.Div([\n    html.H2(\"🎶 Musical Instrument Carousel\", style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div([\n        html.Label(\"Select musical instrument:\", style={\n            \"fontWeight\": \"normal\", \"display\": \"block\", \"marginBottom\": \"8px\"\n        }),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\"label\": item.replace(\"_\", \" \").capitalize(), \"value\": item} for item in MUSICAL_ITEMS],\n            value=MUSICAL_ITEMS[0],\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Affichage du carousel\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = musical_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"20px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"430px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"20px\"}),\n        ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontStyle\": \"italic\"})\n    ])\n\n# 🔁 Navigation flèches\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Run app\napp.run(port=8221)","visibility":"hide","key":"K1igC1f5UY"},{"type":"output","id":"uWvF4avyMuEu6oR51B6k8","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"\n        <iframe\n            width=\"100%\"\n            height=\"650\"\n            src=\"http://127.0.0.1:8221/\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        ","content_type":"text/html"},"text/plain":{"content":"<IPython.lib.display.IFrame at 0x7f29fc18f610>","content_type":"text/plain"}}}],"visibility":"show","key":"ofq40kcOCk"}],"visibility":"show","key":"ycbQ2Ia8hP"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Medical Instrument Carousel","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"mgNQWa8vFA"}],"identifier":"medical-instrument-carousel","label":"Medical Instrument Carousel","html_id":"medical-instrument-carousel","implicit":true,"enumerator":"1.11","key":"QuVzBXrKTu"}],"key":"qyH1NH6isL"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dash import dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\n\n# ✅ Dash config with correct asset path\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"🩺 Medical Instrument Carousel\"\n\n# 📂 Load medical instrument categories\nMEDICAL_DIR = os.path.abspath(\"../assets/object/medical_instrument\")\nMEDICAL_ITEMS = sorted([\n    item for item in os.listdir(MEDICAL_DIR)\n    if os.path.isdir(os.path.join(MEDICAL_DIR, item))\n])\n\n# 📸 Dictionary {item: list of images}\nmedical_images = {\n    item: sorted([\n        f\"/assets/object/medical_instrument/{item}/{img}\"\n        for img in os.listdir(os.path.join(MEDICAL_DIR, item))\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for item in MEDICAL_ITEMS\n}\n\n# 🖼️ Layout\napp.layout = html.Div([\n    html.H2(\"🩺 Medical Instrument Carousel\", style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div([\n        html.Label(\"Select medical instrument:\", style={\n            \"fontWeight\": \"normal\", \"display\": \"block\", \"marginBottom\": \"8px\"\n        }),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\"label\": item.replace(\"_\", \" \").capitalize(), \"value\": item} for item in MEDICAL_ITEMS],\n            value=MEDICAL_ITEMS[0],\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Update carousel on selection\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = medical_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"20px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"430px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"20px\"}),\n        ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontStyle\": \"italic\"})\n    ])\n\n# 🔁 Navigation with arrows\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Launch app\napp.run(port=8159)","visibility":"hide","key":"U3DLTvmFUo"},{"type":"output","id":"NGYjr_glKeMD9o9g3XWRP","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"\n        <iframe\n            width=\"100%\"\n            height=\"650\"\n            src=\"http://127.0.0.1:8159/\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        ","content_type":"text/html"},"text/plain":{"content":"<IPython.lib.display.IFrame at 0x7f29dd08bfd0>","content_type":"text/plain"}}}],"visibility":"show","key":"TmLbhhktie"}],"visibility":"show","key":"Tj12we7aHa"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Tool Carousel","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jr21pWZmIc"}],"identifier":"tool-carousel","label":"Tool Carousel","html_id":"tool-carousel","implicit":true,"enumerator":"1.12","key":"U5x8fY0Xd0"}],"key":"r17998k6mQ"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dash import dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\n\n# ✅ Proper config for images in notebook\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"🔧 Tool Carousel\"\n\n# 📦 Tool categories list\nTOOL_DIR = os.path.abspath(\"../assets/object/tool\")\nTOOL_ITEMS = sorted([\n    item for item in os.listdir(TOOL_DIR)\n    if os.path.isdir(os.path.join(TOOL_DIR, item))\n])\n\n# 📸 Collect image paths per tool\ntool_images = {}\nfor item in TOOL_ITEMS:\n    item_dir = os.path.join(TOOL_DIR, item)\n    rel_dir = os.path.relpath(item_dir, os.path.abspath(\"../assets\"))\n    tool_images[item] = sorted([\n        f\"/assets/{rel_dir}/{img}\"\n        for img in os.listdir(item_dir)\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n\n# 🖼️ Layout\napp.layout = html.Div([\n    html.H2(\"🔧 Tool Carousel\", style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div([\n        html.Label(\"Select tool item:\", style={\n            \"fontWeight\": \"normal\", \"display\": \"block\", \"marginBottom\": \"8px\"\n        }),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\n                \"label\": item.replace(\"_\", \" \").capitalize(),\n                \"value\": item\n            } for item in TOOL_ITEMS],\n            value=TOOL_ITEMS[0],\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Carousel display\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = tool_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"20px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"430px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"20px\"})\n        ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontStyle\": \"italic\"})\n    ])\n\n# 🔁 Arrow navigation\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Launch server\napp.run(port=8124)","visibility":"hide","key":"YZSKyr4J3R"},{"type":"output","id":"qtmo7U6ZheIh5VrCJ8r7K","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"\n        <iframe\n            width=\"100%\"\n            height=\"650\"\n            src=\"http://127.0.0.1:8124/\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        ","content_type":"text/html"},"text/plain":{"content":"<IPython.lib.display.IFrame at 0x7f29fc1c1ba0>","content_type":"text/plain"}}}],"visibility":"show","key":"oHkMBNvLxX"}],"visibility":"show","key":"MbbbjT7PAn"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"School Carousel","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"i8nrx7OBAY"}],"identifier":"school-carousel","label":"School Carousel","html_id":"school-carousel","implicit":true,"enumerator":"1.13","key":"GDpM96f98y"}],"key":"tpsvASnAc8"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dash import dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\n\n# ✅ Setup Dash app with proper asset path\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"📚 School Carousel\"\n\n# 📦 Get all school-related categories\nSCHOOL_DIR = os.path.abspath(\"../assets/object/school\")\nSCHOOL_ITEMS = sorted([\n    item for item in os.listdir(SCHOOL_DIR)\n    if os.path.isdir(os.path.join(SCHOOL_DIR, item))\n])\n\n# 📸 Collect images per category\nschool_images = {}\nfor item in SCHOOL_ITEMS:\n    item_dir = os.path.join(SCHOOL_DIR, item)\n    rel_dir = os.path.relpath(item_dir, os.path.abspath(\"../assets\"))\n    school_images[item] = sorted([\n        f\"/assets/{rel_dir}/{img}\"\n        for img in os.listdir(item_dir)\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n\n# 🖼️ Layout\napp.layout = html.Div([\n    html.H2(\"📚 School Carousel\", style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div([\n        html.Label(\"Select school item:\", style={\n            \"fontWeight\": \"normal\", \"display\": \"block\", \"marginBottom\": \"8px\"\n        }),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\n                \"label\": item.replace(\"_\", \" \").capitalize(),\n                \"value\": item\n            } for item in SCHOOL_ITEMS],\n            value=SCHOOL_ITEMS[0],\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Update carousel when dropdown changes\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = school_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"20px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"430px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"20px\"})\n        ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontStyle\": \"italic\"})\n    ])\n\n# 🔁 Navigate through images\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Run it\napp.run(port=8299)","visibility":"hide","key":"AtknHbheFc"},{"type":"output","id":"zVxlJEd00XmAYGZNfvI23","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"\n        <iframe\n            width=\"100%\"\n            height=\"650\"\n            src=\"http://127.0.0.1:8299/\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        ","content_type":"text/html"},"text/plain":{"content":"<IPython.lib.display.IFrame at 0x7f29fc169f30>","content_type":"text/plain"}}}],"visibility":"show","key":"ZLckv2UKAO"}],"visibility":"show","key":"rEhhtxm96Q"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Outdoor Sport Carousel","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"JI5qXvKKKl"}],"identifier":"outdoor-sport-carousel","label":"Outdoor Sport Carousel","html_id":"outdoor-sport-carousel","implicit":true,"enumerator":"1.14","key":"ikm1F7DdoA"}],"key":"NBD1luJHsw"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dash import dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\n\n# ✅ Dash config with asset path setup\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"🏃 Outdoor Sport Carousel\"\n\n# 📂 Load outdoor sport categories\nSPORT_DIR = os.path.abspath(\"../assets/object/outdoor_sport\")\nSPORT_ITEMS = sorted([\n    item for item in os.listdir(SPORT_DIR)\n    if os.path.isdir(os.path.join(SPORT_DIR, item))\n])\n\n# 📸 Dictionary {item: list of image paths}\nsport_images = {\n    item: sorted([\n        f\"/assets/object/outdoor_sport/{item}/{img}\"\n        for img in os.listdir(os.path.join(SPORT_DIR, item))\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for item in SPORT_ITEMS\n}\n\n# 🖼️ Layout\napp.layout = html.Div([\n    html.H2(\"🏃 Outdoor Sport Carousel\", style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div([\n        html.Label(\"Select outdoor sport item:\", style={\n            \"fontWeight\": \"normal\", \"display\": \"block\", \"marginBottom\": \"8px\"\n        }),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\"label\": item.replace(\"_\", \" \").capitalize(), \"value\": item} for item in SPORT_ITEMS],\n            value=SPORT_ITEMS[0],\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Display carousel based on dropdown\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = sport_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"20px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"420px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"20px\"}),\n        ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontStyle\": \"italic\"})\n    ])\n\n# 🔁 Navigation arrows\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Run app\napp.run(port=8876)","visibility":"hide","key":"WCcQwwjhwR"},{"type":"output","id":"gYu1LQuwcFTpfW0fZO25l","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"\n        <iframe\n            width=\"100%\"\n            height=\"650\"\n            src=\"http://127.0.0.1:8876/\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        ","content_type":"text/html"},"text/plain":{"content":"<IPython.lib.display.IFrame at 0x7f29dc795ae0>","content_type":"text/plain"}}}],"visibility":"show","key":"tQ9SEQoIpN"}],"visibility":"show","key":"GU0ThioFGh"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Vehicle Carousel","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"jkbYPpRpS2"}],"identifier":"vehicle-carousel","label":"Vehicle Carousel","html_id":"vehicle-carousel","implicit":true,"enumerator":"1.15","key":"yjgRHdNopH"}],"key":"LVek0NIDRG"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ✅ Absolute assets path support\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\n\napp.title = \"🚗 Vehicle Carousel\"\n\n# 📦 List all subfolders in assets/object/vehicle/\nVEHICLE_PATH = os.path.abspath(\"../assets/object/vehicle\")\nVEHICLE_ITEMS = sorted([\n    item for item in os.listdir(VEHICLE_PATH)\n    if os.path.isdir(os.path.join(VEHICLE_PATH, item))\n])\n\n# 📦 Dictionary {item: [image list]}\nvehicle_images = {\n    item: sorted([\n        os.path.join(VEHICLE_PATH, item, img)\n        for img in os.listdir(os.path.join(VEHICLE_PATH, item))\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for item in VEHICLE_ITEMS\n}\n\n# 🎨 Layout\napp.layout = html.Div([\n    html.H2(\"🚗 Vehicle Carousel\", style={\n        \"textAlign\": \"center\", \"marginBottom\": \"25px\", \"marginTop\": \"10px\",\n        \"fontSize\": \"24px\", \"fontWeight\": \"bold\", \"fontFamily\": \"Georgia, serif\"\n    }),\n\n    html.Div([\n        html.Label(\"Select vehicle item:\", style={\"fontSize\": \"16px\", \"marginBottom\": \"6px\", \"fontFamily\": \"Georgia, serif\"}),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[\n                {\"label\": item.replace(\"_\", \" \").capitalize(), \"value\": item}\n                for item in VEHICLE_ITEMS\n            ],\n            value=VEHICLE_ITEMS[0] if VEHICLE_ITEMS else None,\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\", \"fontFamily\": \"Georgia, serif\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n], style={\"fontFamily\": \"Georgia, serif\", \"padding\": \"30px\"})\n\n# 🔁 Update carousel\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value'),\n    prevent_initial_call=False\n)\ndef update_carousel(item):\n    images = vehicle_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\", \"fontSize\": \"18px\", \"color\": \"#e74c3c\"})\n\n    relative_path = os.path.relpath(images[0], os.path.abspath(\"../assets\"))\n    filename = os.path.basename(images[0])\n\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0, style={\n                \"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"15px\",\n                \"backgroundColor\": \"#f8f9fa\", \"border\": \"1px solid #ccc\",\n                \"borderRadius\": \"8px\", \"cursor\": \"pointer\"\n            }),\n\n            html.Img(id=\"carousel-image\", src=f\"/assets/{relative_path}\", style={\n                \"maxHeight\": \"380px\", \"maxWidth\": \"380px\",\n                \"borderRadius\": \"12px\", \"boxShadow\": \"0 0 6px rgba(0,0,0,0.1)\"\n            }),\n\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0, style={\n                \"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"15px\",\n                \"backgroundColor\": \"#f8f9fa\", \"border\": \"1px solid #ccc\",\n                \"borderRadius\": \"8px\", \"cursor\": \"pointer\"\n            }),\n        ], style={\"display\": \"flex\", \"justifyContent\": \"center\", \"alignItems\": \"center\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display', style={\n            \"fontSize\": \"14px\", \"marginTop\": \"10px\", \"color\": \"#444\", \"fontFamily\": \"Georgia, serif\"\n        })\n    ])\n\n# 🔁 Image navigation\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    relative_path = os.path.relpath(images[index], os.path.abspath(\"../assets\"))\n    filename = os.path.basename(images[index])\n    return f\"/assets/{relative_path}\", index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# 🚀 Run\nif __name__ == \"__main__\":\n    clear_output(wait=True)\n    app.run(port=8997)","visibility":"hide","key":"ZQUgpy0hsN"},{"type":"output","id":"gG0HLBQlUDGUFlZkzB5u0","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"\n        <iframe\n            width=\"100%\"\n            height=\"650\"\n            src=\"http://127.0.0.1:8997/\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        ","content_type":"text/html"},"text/plain":{"content":"<IPython.lib.display.IFrame at 0x7f29dc7279a0>","content_type":"text/plain"}}}],"visibility":"show","key":"TaWjVbj1AS"}],"visibility":"show","key":"SXPxRn0FDR"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Bathroom Carousel","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"T0GgWftzPr"}],"identifier":"bathroom-carousel","label":"Bathroom Carousel","html_id":"bathroom-carousel","implicit":true,"enumerator":"1.16","key":"HfuwlGgKqO"}],"key":"fk3N2Cl2PV"},{"type":"block","kind":"notebook-code","data":{"scrolled":true,"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ✅ Tell Dash to look for assets one level up\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\n\napp.title = \"🚿 Bathroom Carousel\"\n\n# 📦 Sous-catégories dans assets/object/bathroom/\nBATHROOM_ITEMS = sorted([\n    item for item in os.listdir(\"../assets/object/bathroom\")\n    if os.path.isdir(os.path.join(\"../assets/object/bathroom\", item))\n])\n\n# 📦 Dictionnaire {item: [liste d’images absolues]}\nbathroom_images = {\n    item: sorted([\n        os.path.abspath(os.path.join(\"..\", \"assets\", \"object\", \"bathroom\", item, img))\n        for img in os.listdir(os.path.join(\"../assets/object/bathroom\", item))\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for item in BATHROOM_ITEMS\n}\n\n# 🖼️ Layout principal\napp.layout = html.Div([\n    html.H2(\"🚿 Bathroom Carousel\", style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div([\n        html.Label(\"Select bathroom item:\"),\n        dcc.Dropdown(\n            id='item-dropdown',\n            options=[{\n                \"label\": html.Div(item.replace(\"_\", \" \").capitalize()),\n                \"value\": item\n            } for item in BATHROOM_ITEMS],\n            value=BATHROOM_ITEMS[0] if BATHROOM_ITEMS else None,\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# 🔁 Afficher le carousel\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('item-dropdown', 'value')\n)\ndef update_carousel(item):\n    images = bathroom_images.get(item, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    # ✅ Get filename + relative path for Dash\n    filename = os.path.basename(images[0])\n    relative_path = os.path.relpath(images[0], os.path.abspath(\"../assets\"))\n    dash_path = f\"/assets/{relative_path}\"\n\n    return html.Div([\n        html.Div([\n            html.Button(\"⬅️\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"15px\"}),\n\n            html.Img(id=\"carousel-image\", src=dash_path,\n                     style={\"height\": \"430px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n\n            html.Button(\"➡️\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"15px\"}),\n        ], style={\"display\": \"flex\", \"justifyContent\": \"center\", \"alignItems\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\"})\n    ])\n\n# 🔁 Navigation flèches\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    relative_path = os.path.relpath(images[index], os.path.abspath(\"../assets\"))  # ✅ Convert abs → web path\n    return f\"/assets/{relative_path}\", index, f\"{index + 1}/{len(images)} - {filename}\"\n\n\nimport threading\nimport time\n\ndef keep_dash_running():\n    try:\n        app.run(port=8804, debug=False, use_reloader=False)\n    except:\n        print(\"Dash server already running or port in use\")\n\n# 🚀 Lancer\nif __name__ == \"__main__\":\n    clear_output(wait=True)\n    app.run(port=8604)","visibility":"hide","key":"tSm035siyI"},{"type":"output","id":"sJvRh4rJdhWUqeykEN80K","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"\n        <iframe\n            width=\"100%\"\n            height=\"650\"\n            src=\"http://127.0.0.1:8604/\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        ","content_type":"text/html"},"text/plain":{"content":"<IPython.lib.display.IFrame at 0x7f29de287610>","content_type":"text/plain"}}}],"visibility":"show","key":"J9ArpsfAlo"}],"visibility":"show","key":"oE31EnYMF6"}],"key":"blbdnDucvg"},"references":{"cite":{"order":[],"data":{}}}}
{"version":2,"kind":"Notebook","sha256":"a9f520ad85133aad31dc27a798c77196219cf3e97e0a03892566025bab448496","slug":"animated-being","location":"/content/animated_being.ipynb","dependencies":[],"frontmatter":{"title":"üß¨ Animated Beings","content_includes_title":false,"kernelspec":{"name":"datalad-env","display_name":"Python (datalad-env)","language":"python"},"authors":[{"nameParsed":{"literal":"Lune P Bellec","given":"Lune P","family":"Bellec"},"name":"Lune P Bellec","orcid":"0000-0002-9111-0699","corresponding":false,"equal_contributor":false,"email":"lune.bellec@umontreal.ca","roles":["Conceptualization","Software","Writing ‚Äì original draft"],"affiliations":["udem"],"url":"https://github.com/pbellec","github":"lbellec","id":"contributors-myst-generated-uid-0"},{"nameParsed":{"literal":"Sara Barbu","given":"Sara","family":"Barbu"},"name":"Sara Barbu","orcid":"0009-0009-1808-375X","equal_contributor":false,"email":"sara.barbu@umontreal.ca","roles":["Software","Writing ‚Äì review & editing"],"affiliations":["udem"],"github":"SaraBarbu","id":"contributors-myst-generated-uid-1","corresponding":true}],"doi":"10.55458/neurolibre.xxxxx","open_access":true,"license":{"content":{"id":"CC-BY-4.0","url":"https://creativecommons.org/licenses/by/4.0/","name":"Creative Commons Attribution 4.0 International","free":true,"CC":true},"code":{"id":"MIT","url":"https://opensource.org/licenses/MIT","name":"MIT License","free":true,"osi":true}},"github":"https://github.com/courtois-neuromod/image10k.paper","subject":"Living Preprint","venue":{"title":"Neurolibre"},"numbering":{"heading_1":{"enabled":true},"heading_2":{"enabled":true},"heading_3":{"enabled":true},"heading_4":{"enabled":true},"heading_5":{"enabled":true},"heading_6":{"enabled":true}},"keywords":["image stimuli","annotation","crowdsourcing"],"affiliations":[{"id":"udem","name":"Universit√© de Montr√©ƒÖl","department":"Psychology","address":"2900 Bd √âdouard-Montpetit","city":"Montreal","state":"Quebec","postal_code":"H3T 1J4","country":"Canada","isni":"0000 0004 0435 3292","ror":"https://ror.org/0161xgx34","phone":"(514) 343-6111"}],"abbreviations":{"MyST":"Markedly Structured Markdown"},"edit_url":"https://github.com/courtois-neuromod/image10k.paper/blob/main/content/animated_being.ipynb","exports":[{"format":"ipynb","filename":"animated_being.ipynb","url":"/animated_being-8350b4ef191cf8a2268a34aa83726c21.ipynb"}]},"widgets":{},"mdast":{"type":"root","children":[{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":2,"position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"children":[{"type":"text","value":"Explore carousels for various living categories below. Each section features interactive image selectors built using Dash.","position":{"start":{"line":3,"column":1},"end":{"line":3,"column":1}},"key":"c2NTpCxlUH"}],"identifier":"explore-carousels-for-various-living-categories-below-each-section-features-interactive-image-selectors-built-using-dash","label":"Explore carousels for various living categories below. Each section features interactive image selectors built using Dash.","html_id":"explore-carousels-for-various-living-categories-below-each-section-features-interactive-image-selectors-built-using-dash","implicit":true,"enumerator":"1","key":"HxjBlB8kKy"}],"key":"XesJbgHjeh"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Human Carousel","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"smghCwn2bm"}],"identifier":"human-carousel","label":"Human Carousel","html_id":"human-carousel","implicit":true,"enumerator":"1.1","key":"zsOJahIeyN"}],"key":"JJZtiZbt1I"},{"type":"block","kind":"notebook-code","data":{"scrolled":true,"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ‚úÖ Dash config with parent asset path\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"üßç Human Face Carousel\"\n\n# üì¶ Paths\nHUMAN_PATH = os.path.abspath(\"../assets/human\")\nHUMAN_PARTS = sorted([d for d in os.listdir(HUMAN_PATH) if os.path.isdir(f\"{HUMAN_PATH}/{d}\")])\n\n# üì¶ Face-specific subfolders\nFACE_SEX = [\"female\", \"male\"]\nFACE_AGES = [\"baby\", \"child\", \"adolescent\", \"adult\", \"elder\"]\n\n# üì¶ Load non-face images\nbasic_images = {\n    part: sorted([\n        f\"/assets/human/{part}/{img}\"\n        for img in os.listdir(os.path.join(HUMAN_PATH, part))\n        if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n    ])\n    for part in HUMAN_PARTS if part != \"face\"\n}\n\n# üì¶ Load face images\nface_images = {}\nfor sex in FACE_SEX:\n    for age in FACE_AGES:\n        folder = os.path.join(HUMAN_PATH, \"face\", sex, age)\n        if os.path.isdir(folder):\n            face_images[(sex, age)] = sorted([\n                f\"/assets/human/face/{sex}/{age}/{img}\"\n                for img in os.listdir(folder)\n                if img.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n            ])\n\n# üñºÔ∏è Layout\napp.layout = html.Div([\n    html.H2(\"üßç Human Carousel\", style={\n        \"textAlign\": \"center\", \"marginBottom\": \"25px\", \"marginTop\": \"10px\",\n        \"fontSize\": \"24px\", \"fontWeight\": \"bold\", \"fontFamily\": \"Georgia, serif\"\n    }),\n\n    html.Div([\n        html.Label(\"Select body part:\", style={\n            \"fontWeight\": \"normal\", \"display\": \"block\", \"marginBottom\": \"6px\",\n            \"fontSize\": \"15px\", \"fontFamily\": \"Georgia, serif\"\n        }),\n        dcc.Dropdown(\n            id='part-dropdown',\n            options=[{\"label\": part.capitalize(), \"value\": part} for part in HUMAN_PARTS],\n            value=HUMAN_PARTS[0] if HUMAN_PARTS else None,\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='sub-dropdowns', style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# üîÅ Update sex/age dropdowns if 'face'\n@app.callback(\n    Output('sub-dropdowns', 'children'),\n    Input('part-dropdown', 'value')\n)\ndef update_sub_dropdowns(part):\n    if part == \"face\":\n        return html.Div([\n            html.Label(\"Sex:\", style={\"marginBottom\": \"6px\", \"display\": \"block\"}),\n            dcc.Dropdown(\n                id='sex-dropdown',\n                options=[{\"label\": s.capitalize(), \"value\": s} for s in FACE_SEX],\n                value=FACE_SEX[0],\n                clearable=False,\n                style={\"width\": \"200px\", \"margin\": \"0 auto 12px auto\"}\n            ),\n            html.Label(\"Age group:\", style={\"marginBottom\": \"6px\", \"display\": \"block\"}),\n            dcc.Dropdown(\n                id='age-dropdown',\n                options=[{\"label\": a.capitalize(), \"value\": a} for a in FACE_AGES],\n                value=FACE_AGES[0],\n                clearable=False,\n                style={\"width\": \"200px\", \"margin\": \"0 auto\"}\n            )\n        ])\n    else:\n        return html.Div([\n            dcc.Dropdown(id='sex-dropdown', value='female', style={'display': 'none'}),\n            dcc.Dropdown(id='age-dropdown', value='baby', style={'display': 'none'})\n        ])\n\n# üîÅ Update carousel based on dropdowns\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('part-dropdown', 'value'),\n    Input('sex-dropdown', 'value'),\n    Input('age-dropdown', 'value'),\n    prevent_initial_call=False\n)\ndef update_carousel(part, sex, age):\n    if part == \"face\":\n        images = face_images.get((sex, age), [])\n    else:\n        images = basic_images.get(part, [])\n\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n    return html.Div([\n        html.Div([\n            html.Button(\"‚¨ÖÔ∏è\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"15px\"}\n),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"450px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"‚û°Ô∏è\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"15px\"}\n),\n        ], style={\"display\": \"flex\", \"justifyContent\": \"center\", \"alignItems\": \"center\", \"marginBottom\": \"20px\"}),\n\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontStyle\": \"italic\", \"fontFamily\": \"Georgia, serif\"})\n    ])\n\n# üîÅ Navigation logic\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# üöÄ Run the app\nif __name__ == \"__main__\":\n    clear_output(wait=True)\n    app.run(port=8167)","visibility":"hide","key":"ZrXe1Jr61i"},{"type":"output","id":"HQFjlG7sqfNV3lkJEQOst","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"\n        <iframe\n            width=\"100%\"\n            height=\"650\"\n            src=\"http://127.0.0.1:8167/\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        ","content_type":"text/html"},"text/plain":{"content":"<IPython.lib.display.IFrame at 0x7fcaf235afb0>","content_type":"text/plain"}}}],"visibility":"show","key":"AgF83tsjbG"}],"visibility":"show","key":"C4eF16uQb5"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Bird Carousel","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"kGbag5TmqG"}],"identifier":"bird-carousel","label":"Bird Carousel","html_id":"bird-carousel","implicit":true,"enumerator":"1.2","key":"YFeGFVV9CH"}],"key":"of8sTRFyYI"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ‚úÖ Tell Dash to look for assets one level up\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\n\napp.title = \"üïäÔ∏è Bird Carousel\"\n\n# üì¶ Liste des esp√®ces d'oiseaux\nBIRD_SPECIES = sorted([\n    d for d in os.listdir(\"../assets/birds\")\n    if os.path.isdir(os.path.join(\"../assets/birds\", d))\n])\n\n# üì¶ Dictionnaire {species: [images]}\nbird_images = {}\nfor species in BIRD_SPECIES:\n    folder = os.path.join(\"../assets/birds\", species)\n    images = []\n    for root, _, files in os.walk(folder):\n        images += [os.path.join(root, f) for f in files if f.lower().endswith((\".jpg\", \".jpeg\", \".png\"))]\n    bird_images[species] = sorted(images)\n\n# üé® Layout principal\napp.layout = html.Div([\n    html.H2(\"\\ud83d\\udd4a\\ufe0f Bird Carousel\", style={\n        \"textAlign\": \"center\", \"marginBottom\": \"10px\", \"marginTop\": \"5px\",\n        \"fontSize\": \"18px\", \"fontWeight\": \"bold\", \"fontFamily\": \"Georgia, serif\"\n    }),\n\n    html.Div([\n        html.Label(\"Select bird species:\", style={\"fontSize\": \"16px\", \"marginBottom\": \"6px\", \"fontFamily\": \"Georgia, serif\"}),\n        dcc.Dropdown(\n            id='species-dropdown',\n            options=[{\"label\": s.capitalize(), \"value\": s} for s in BIRD_SPECIES],\n            value=BIRD_SPECIES[0],\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\", \"fontFamily\": \"Georgia, serif\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n], style={\"fontFamily\": \"Georgia, serif\", \"padding\": \"30px\"})\n\n\n# üîÑ Affiche le bon carousel pour chaque esp√®ce\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('species-dropdown', 'value')\n)\ndef update_carousel(species):\n    images = bird_images.get(species, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n\n    return html.Div([\n        html.Div([\n            html.Button(\"\\u2b05\\ufe0f\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"15px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"416px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"\\u27a1\\ufe0f\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"15px\"}),\n        ], style={\"display\": \"flex\", \"justifyContent\": \"center\", \"alignItems\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"13px\", \"fontFamily\": \"Georgia, serif\", \"color\": \"#444\"})\n    ])\n\n# üîÑ Navigation entre les images\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# üöÄ Lancer \nif __name__ == \"__main__\":\n    clear_output(wait=True)\n    app.run(port=8139)","visibility":"hide","key":"vyF0tqDGSr"},{"type":"output","id":"5vd-_ghWsDlHxcaN6D3JW","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"\n        <iframe\n            width=\"100%\"\n            height=\"650\"\n            src=\"http://127.0.0.1:8139/\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        ","content_type":"text/html"},"text/plain":{"content":"<IPython.lib.display.IFrame at 0x7fcaf10f9bd0>","content_type":"text/plain"}}}],"visibility":"show","key":"uXjrXhc89E"}],"visibility":"show","key":"b6Jp0U2k9V"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Fish Carousel","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"qhvUD2Oq7K"}],"identifier":"fish-carousel","label":"Fish Carousel","html_id":"fish-carousel","implicit":true,"enumerator":"1.3","key":"A4zh4wBXbH"}],"key":"DqWkcAfswl"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ‚úÖ Dash config with parent asset path\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"üêü Fish Carousel\"\n\n# üì¶ Liste des esp√®ces\nFISH_SPECIES = sorted([\n    d for d in os.listdir(\"../assets/fish\")\n    if os.path.isdir(f\"../assets/fish/{d}\")\n])\n\n# üì¶ Dictionnaire {species: [image paths]}\nfish_images = {}\nfor species in FISH_SPECIES:\n    folder = f\"../assets/fish/{species}\"\n    images = []\n    for root, _, files in os.walk(folder):\n        images += [\n            os.path.abspath(os.path.join(root, f))\n            for f in files if f.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n        ]\n    fish_images[species] = sorted(images)\n\n# üñºÔ∏è Layout\napp.layout = html.Div([\n    html.H2(\"üêü Fish Carousel\", style={\n        \"textAlign\": \"center\", \"marginBottom\": \"25px\", \"marginTop\": \"10px\",\n        \"fontSize\": \"24px\", \"fontWeight\": \"bold\", \"fontFamily\": \"Georgia, serif\"\n    }),\n\n    html.Div([\n        html.Label(\"Select fish species:\", style={\n            \"marginBottom\": \"6px\", \"frontSize\": \"15px\", \"frontStyle\": \"normal\"\n            \n        }),\n        dcc.Dropdown(\n            id='species-dropdown',\n            options=[{\"label\": s.capitalize(), \"value\": s} for s in FISH_SPECIES],\n            value=FISH_SPECIES[0],\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# üîÅ Affiche carousel\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('species-dropdown', 'value')\n)\ndef update_carousel(species):\n    images = fish_images.get(species, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n    relative_path = os.path.relpath(images[0], os.path.abspath(\"../assets\"))\n    dash_path = f\"/assets/{relative_path}\"\n\n    return html.Div([\n        html.Div([\n            html.Button(\"‚¨ÖÔ∏è\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"15px\"}),\n            html.Img(id=\"carousel-image\", src=dash_path,\n                     style={\"height\": \"450px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n\n            html.Button(\"‚û°Ô∏è\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"15px\"}),\n        ], style={\"display\": \"flex\", \"justifyContent\": \"center\", \"alignItems\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"13px\", \"fontFamily\": \"Georgia, serif\"})\n    ])\n\n# üîÅ Navigation\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    relative_path = os.path.relpath(images[index], os.path.abspath(\"../assets\"))\n    return f\"/assets/{relative_path}\", index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# üöÄ Launch\nif __name__ == \"__main__\":\n    clear_output(wait=True)\n    app.run(port=8805)","visibility":"hide","key":"VgTXdBnaiN"},{"type":"output","id":"hPQpFX278WHPV50CD5IEL","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"\n        <iframe\n            width=\"100%\"\n            height=\"650\"\n            src=\"http://127.0.0.1:8805/\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        ","content_type":"text/html"},"text/plain":{"content":"<IPython.lib.display.IFrame at 0x7fcb102e3520>","content_type":"text/plain"}}}],"visibility":"show","key":"q0FsOXlRh3"}],"visibility":"show","key":"q60kDNwzf7"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Reptile Carousel","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"NgKOR4t1ln"}],"identifier":"reptile-carousel","label":"Reptile Carousel","html_id":"reptile-carousel","implicit":true,"enumerator":"1.4","key":"lkbUeKC4gD"}],"key":"PciR9ClVss"},{"type":"block","kind":"notebook-code","data":{"scrolled":false,"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dash import dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ‚úÖ Configure app with proper asset path\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"ü¶é Reptile Carousel\"\n\n# üìÇ Load reptile species\nREPTILE_DIR = os.path.abspath(\"../assets/reptiles\")\nREPTILE_SPECIES = sorted([\n    d for d in os.listdir(REPTILE_DIR)\n    if os.path.isdir(os.path.join(REPTILE_DIR, d))\n])\n\n# üì∏ Dictionary of {species: [image paths]}\nreptile_images = {}\nfor species in REPTILE_SPECIES:\n    folder = os.path.join(REPTILE_DIR, species)\n    images = []\n    for root, _, files in os.walk(folder):\n        rel_root = os.path.relpath(root, os.path.abspath(\"../assets\"))\n        images += [f\"/assets/{rel_root}/{f}\" for f in files if f.lower().endswith((\".jpg\", \".jpeg\", \".png\"))]\n    reptile_images[species] = sorted(images)\n\n# üñºÔ∏è Layout\napp.layout = html.Div([\n    html.H2(\"ü¶é Reptile Carousel\", style={\"textAlign\": \"center\", \"marginBottom\": \"30px\"}),\n\n    html.Div([\n        dcc.Dropdown(\n            id='species-dropdown',\n            options=[{\"label\": s.replace(\"_\", \" \").capitalize(), \"value\": s} for s in REPTILE_SPECIES],\n            value=REPTILE_SPECIES[0],\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# üîÅ Display carousel content based on species\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('species-dropdown', 'value')\n)\ndef update_carousel(species):\n    images = reptile_images.get(species, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n\n    return html.Div([\n        html.Div([\n            html.Button(\"‚¨ÖÔ∏è\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginRight\": \"15px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"450px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"‚û°Ô∏è\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"18px\", \"padding\": \"5px 10px\", \"marginLeft\": \"15px\"}),\n        ], style={\"display\": \"flex\", \"justifyContent\": \"center\", \"alignItems\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"13px\", \"fontStyle\": \"italic\"})\n    ])\n\n# üîÅ Handle navigation\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# üöÄ Run app\nclear_output(wait=True)\napp.run(port=8169)\n","visibility":"hide","key":"KEjDkZGKds"},{"type":"output","id":"EKYyinpZffakawvoYmFE4","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"\n        <iframe\n            width=\"100%\"\n            height=\"650\"\n            src=\"http://127.0.0.1:8169/\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        ","content_type":"text/html"},"text/plain":{"content":"<IPython.lib.display.IFrame at 0x7fcaf235b370>","content_type":"text/plain"}}}],"visibility":"show","key":"OYsPug5xrN"}],"visibility":"show","key":"QoSd7aJ4F6"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Mammal Carousel","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"QlA8kaUM4U"}],"identifier":"mammal-carousel","label":"Mammal Carousel","html_id":"mammal-carousel","implicit":true,"enumerator":"1.5","key":"QjIy0VXUkX"}],"key":"xg4Bm8m5mV"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nimport glob\nfrom IPython.display import clear_output  # ‚úÖ to avoid duplicate display in notebook\n\n# ‚úÖ Tell Dash where to find assets\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"Mammal Carousel\"\n\n# üì¶ Paths\nAQUATIC_PATH = \"../assets/mammals/aquatic_mammal\"\nNONAQUATIC_PARENT = \"../assets/mammals\"\n\n# üì¶ Load species lists\naquatic_species = []\nnon_aquatic_species = []\n\ntry:\n    if os.path.exists(AQUATIC_PATH):\n        aquatic_species = sorted([\n            d for d in os.listdir(AQUATIC_PATH)\n            if os.path.isdir(os.path.join(AQUATIC_PATH, d))\n        ])\nexcept Exception as e:\n    print(f\"Error loading aquatic species: {e}\")\n\ntry:\n    if os.path.exists(NONAQUATIC_PARENT):\n        non_aquatic_species = sorted([\n            d for d in os.listdir(NONAQUATIC_PARENT)\n            if os.path.isdir(os.path.join(NONAQUATIC_PARENT, d)) and d != \"aquatic_mammal\"\n        ])\nexcept Exception as e:\n    print(f\"Error loading non-aquatic species: {e}\")\n\n# üì¶ Load images\nmammal_images = {}\n\ndef load_images(folder, key_prefix):\n    for species in os.listdir(folder):\n        species_path = os.path.join(folder, species)\n        if not os.path.isdir(species_path):\n            continue\n        images = sorted([\n            os.path.abspath(f) for f in glob.glob(os.path.join(species_path, \"**\"), recursive=True)\n            if f.lower().endswith((\".jpg\", \".jpeg\", \".png\"))\n        ])\n        if images:\n            mammal_images[f\"{key_prefix}::{species}\"] = images\n\nload_images(AQUATIC_PATH, \"aquatic\")\nload_images(NONAQUATIC_PARENT, \"non_aquatic\")\n\n# üîë Default species\ndefault_species_key = list(mammal_images.keys())[0] if mammal_images else None\n\n# üéØ Dropdown options\ndropdown_options = [\n    {\"label\": k.split(\"::\")[1].replace(\"_\", \" \").title(), \"value\": k}\n    for k in mammal_images.keys()\n]\n\n# --------------------\n# Layout\n# --------------------\napp.layout = html.Div([\n    html.H2(\"üêª Mammal Carousel\", style={\"textAlign\": \"center\", \"marginBottom\": \"25px\", \"marginTop\": \"10px\"}),\n\n    html.Div([\n        html.Label(\"Select species:\"),\n        dcc.Dropdown(\n            id='species-dropdown',\n            options=dropdown_options,\n            value=default_species_key,\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"40px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n# -----------------------------\n# Carousel rendering logic\n# -----------------------------\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('species-dropdown', 'value'),\n    prevent_initial_call=False\n)\ndef update_carousel(species_key):\n    if not species_key or species_key not in mammal_images:\n        return html.P(\"Please select a species.\")\n\n    images = mammal_images[species_key]\n    if not images:\n        return html.P(\"No images available for this species.\")\n\n    filename = os.path.basename(images[0])\n    relative_path = os.path.relpath(images[0], os.path.abspath(\"../assets\"))\n\n    return html.Div([\n        html.Div([\n            html.Button(\"‚¨ÖÔ∏è\", id=\"prev-button\", n_clicks=0, style={\n                \"frontSize\": \"24px\",\n                \"padding\": \"6px 12px \"\n            }),\n            html.Img(id=\"carousel-image\", src=f\"/assets/{relative_path}\",\n                     style={\"maxHeight\": \"430px\", \"maxWidth\": \"400px\"}),\n            html.Button(\"‚û°Ô∏è\", id=\"next-button\", n_clicks=0, style={\n                \"frontSize\": \"24px\",\n                \"padding\": \"6px 12px \"\n            }),\n        ], style={\"display\": \"flex\", \"justifyContent\": \"center\", \"alignItems\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display')\n    ])\n\n# -----------------------------\n# Navigation buttons\n# -----------------------------\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images available\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    relative_path = os.path.relpath(images[index], os.path.abspath(\"../assets\"))\n    return f\"/assets/{relative_path}\", index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# üöÄ Run\nif __name__ == \"__main__\":\n    clear_output(wait=True)\n    app.run(port=8899)","visibility":"hide","key":"dDGZJnhgmT"},{"type":"output","id":"CCnXRmZzxmiz3t6eoc3So","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"\n        <iframe\n            width=\"100%\"\n            height=\"650\"\n            src=\"http://127.0.0.1:8899/\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        ","content_type":"text/html"},"text/plain":{"content":"<IPython.lib.display.IFrame at 0x7fcaf11a0730>","content_type":"text/plain"}}}],"visibility":"show","key":"j3ykUDpRzB"}],"visibility":"show","key":"QPgeqHL2lE"},{"type":"block","kind":"notebook-content","children":[{"type":"heading","depth":3,"position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"children":[{"type":"text","value":"Insect Carousel","position":{"start":{"line":1,"column":1},"end":{"line":1,"column":1}},"key":"HIKuudsrrc"}],"identifier":"insect-carousel","label":"Insect Carousel","html_id":"insect-carousel","implicit":true,"enumerator":"1.6","key":"YXwZhTQaZ9"}],"key":"WZCZeyDxnc"},{"type":"block","kind":"notebook-code","data":{"tags":[]},"children":[{"type":"code","lang":"python","executable":true,"value":"from dash import Dash, dcc, html, Input, Output, State, ctx\nfrom jupyter_dash import JupyterDash\nimport os\nfrom IPython.display import clear_output\n\n# ‚úÖ Dash config with assets path\napp = JupyterDash(\n    __name__,\n    assets_folder=os.path.abspath(\"../assets\"),\n    assets_url_path=\"/assets\"\n)\napp.title = \"üêû Insect Carousel\"\n\n# üì¶ Liste des esp√®ces\nINSECT_FOLDER = os.path.abspath(\"../assets/insects\")\nINSECT_SPECIES = sorted([\n    d for d in os.listdir(INSECT_FOLDER)\n    if os.path.isdir(os.path.join(INSECT_FOLDER, d))\n])\n\n# üì¶ Dictionnaire {species: [image list]}\ninsect_images = {}\nfor species in INSECT_SPECIES:\n    species_path = os.path.join(INSECT_FOLDER, species)\n    images = []\n    for root, _, files in os.walk(species_path):\n        for f in files:\n            if f.lower().endswith((\".jpg\", \".jpeg\", \".png\")):\n                # Get relative path for browser\n                rel_path = os.path.relpath(os.path.join(root, f), INSECT_FOLDER)\n                web_path = f\"/assets/insects/{rel_path.replace(os.sep, '/')}\"\n                images.append(web_path)\n    insect_images[species] = sorted(images)\n\n# üñºÔ∏è Layout\napp.layout = html.Div([\n    html.H2(\"üêû Insect Carousel\", style={\"textAlign\": \"center\", \"marginBottom\": \"25px\"}),\n\n    html.Div([\n        html.Label(\"Select insect species:\", style={\n            \"fontWeight\": \"normal\", \"fontSize\": \"15px\", \"marginBottom\": \"8px\"\n        }),\n        dcc.Dropdown(\n            id='species-dropdown',\n            options=[{\"label\": s.replace(\"_\", \" \").capitalize(), \"value\": s} for s in INSECT_SPECIES],\n            value=INSECT_SPECIES[0] if INSECT_SPECIES else None,\n            clearable=False,\n            style={\"width\": \"300px\", \"margin\": \"0 auto\"}\n        )\n    ], style={\"textAlign\": \"center\", \"marginBottom\": \"20px\"}),\n\n    html.Div(id='carousel-container', style={\"textAlign\": \"center\"})\n])\n\n\n# üîÅ Carousel update\n@app.callback(\n    Output('carousel-container', 'children'),\n    Input('species-dropdown', 'value')\n)\ndef update_carousel(species):\n    images = insect_images.get(species, [])\n    if not images:\n        return html.P(\"No images available.\", style={\"textAlign\": \"center\"})\n\n    filename = os.path.basename(images[0])\n    return html.Div([\n        html.Div([\n            html.Button(\"‚¨ÖÔ∏è\", id=\"prev-button\", n_clicks=0,\n                        style={\"fontSize\": \"24px\", \"padding\": \"5px 10px\", \"marginRight\": \"15px\"}),\n            html.Img(id=\"carousel-image\", src=images[0],\n                     style={\"height\": \"430px\", \"display\": \"inline-block\", \"verticalAlign\": \"middle\"}),\n            html.Button(\"‚û°Ô∏è\", id=\"next-button\", n_clicks=0,\n                        style={\"fontSize\": \"24px\", \"padding\": \"5px 10px\", \"marginLeft\": \"15px\"}),\n        ], style={\"display\": \"flex\", \"justifyContent\": \"center\", \"alignItems\": \"center\", \"marginBottom\": \"20px\"}),\n\n        dcc.Store(id='image-index', data=0),\n        dcc.Store(id='current-images', data=images),\n        html.Div(f\"1/{len(images)} - {filename}\", id='filename-display',\n                 style={\"textAlign\": \"center\", \"fontSize\": \"14px\", \"fontStyle\": \"italic\"})\n    ])\n\n# üîÅ Navigation buttons\n@app.callback(\n    Output(\"carousel-image\", \"src\"),\n    Output(\"image-index\", \"data\"),\n    Output(\"filename-display\", \"children\"),\n    Input(\"prev-button\", \"n_clicks\"),\n    Input(\"next-button\", \"n_clicks\"),\n    State(\"current-images\", \"data\"),\n    State(\"image-index\", \"data\"),\n    prevent_initial_call=True\n)\ndef navigate_images(prev_clicks, next_clicks, images, index):\n    if not images:\n        return \"\", 0, \"No images\"\n\n    triggered = ctx.triggered_id\n    if triggered == \"next-button\":\n        index = (index + 1) % len(images)\n    elif triggered == \"prev-button\":\n        index = (index - 1) % len(images)\n\n    filename = os.path.basename(images[index])\n    return images[index], index, f\"{index + 1}/{len(images)} - {filename}\"\n\n# üöÄ Launch\nclear_output(wait=True)\napp.run(port=8454)\n","visibility":"hide","key":"qKe4tqENFT"},{"type":"output","id":"NFRodUTEqufZTkQSiDgYu","data":[{"output_type":"display_data","metadata":{},"data":{"text/html":{"content":"\n        <iframe\n            width=\"100%\"\n            height=\"650\"\n            src=\"http://127.0.0.1:8454/\"\n            frameborder=\"0\"\n            allowfullscreen\n            \n        ></iframe>\n        ","content_type":"text/html"},"text/plain":{"content":"<IPython.lib.display.IFrame at 0x7fcaf11a3130>","content_type":"text/plain"}}}],"visibility":"show","key":"WYhP9ZxlHA"}],"visibility":"show","key":"WjXmTSZA0b"}],"key":"ipCdCEqufK"},"references":{"cite":{"order":[],"data":{}}}}